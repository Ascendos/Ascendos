#!/usr/bin/env bash
#
#############################################################################
#############################################################################
#
# sigcheck-repo
#
# checks the signatures of repository of rpms
#
#############################################################################
#
# Copyright 2011 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
# This file is part of X.
#
#    X is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    X is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with X.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################
# note: if you'd like a different license, just let me know which and why
#############################################################################


#############################################################################
#############################################################################
##
## sigcheck-tuv-el6-srpms \
##    [<reposdir>] \
##    [[<RPM-GPG-KEY>]...] 
##
##
## DESCRIPTION
##
## -
##
##
## NOTES
##
## -
##
#############################################################################


## TODO
# - ...
#


#############################################################################
#############################################################################
##
## local constant definitions
##

# for common script library- libx.sh
x_toolname="el-build"
x_prefix=/usr


#############################################################################
#############################################################################
##
## load system library
##

if [ -f "$( dirname $( readlink -e $0 ) )/../../tools/scripts/libx.sh" ]; then
    source "$( dirname $( readlink -e $0 ) )/../../tools/scripts/libx.sh"
elif [ -f "${x_prefix}/lib/${x_toolname}/scripts/libx.sh" ]; then 
    source "${x_prefix}/lib/${x_toolname}/scripts/libx.sh" 
else
    echo "$0: error: fatal: could not load ${x_toolname} system library libx.sh"
    exit 1
fi


#############################################################################
#############################################################################
##
## constant and option default definitions

# to enable debug messages if desired
x_debug=0

# to suppress status messages if desired
x_quiet=0


#############################################################################
#############################################################################
##
## functions
##
function usage {
    echo ""
    echo "usage:"
    echo ""
    echo "${progname} ..."
    echo ""
    echo ""
    exit 1
}


#############################################################################
#############################################################################
##
## main
##

status "initializing..."


# parse options
if [ $# -eq 0 ]; then 
    target_repo="${x_bake_cachedir}"
    target_keys=$( ls -1A "${x_devdir}/infra/security/keys/RPM-GPG-KEY"* )
elif [ $# -eq 1 ]; then 
    target_repo=$( readlink -e "${1}" ) 
    target_keys=$( ls -1A "${x_devdir}/infra/security/keys/RPM-GPG-KEY"* )
else
    target_repo=$( readlink -e "${1}" ) 
    shift
    target_keys="$@"
fi

tmpdir=$( setup_tmpdir )

mkdir -p "${tmpdir}/gnupg"

mkdir -p "${tmpdir}/rpmdb"

showvar target_keys
for target_key in ${target_keys}; do
    showvar target_key
    GNUPGHOME="${tmpdir}/gnupg" \
	rpm \
	--dbpath "${tmpdir}/rpmdb" \
	--import "${target_key}"
done

num_pkgs_total=$( find "${target_repo}" \
    -type f -name "*.rpm" -print \
    | wc -l )

num_checked=0

status "checking source package signatures..."    

for srpm in $( find "${target_repo}" \
    -type f -name "*.rpm" -print ); do
    status "checking " $( basename "${srpm}" ) " ... "

    no_gpg=0
    no_pgp=0
    no_dsa=0
    no_rsa=0

    GNUPGHOME="${tmpdir}/gnupg" \
	rpm --checksig \
	--dbpath "${tmpdir}/rpmdb" \
	"${srpm}" \
	> "${tmpdir}/lastresult" 2>&1

    if [ $? -ne 0 ]; then
	cat "${tmpdir}/lastresult"
	die "ALERT: package ${srpm} FAILED SECURITY VERIFICATION" 
    fi

    if ( grep -q "NOT OK" "${tmpdir}/lastresult" ); then
	cat "${tmpdir}/lastresult"
	die "ALERT: package ${srpm} FAILED SECURITY VERIFICATION"
    fi

    if ( ! grep -q "sha1" "${tmpdir}/lastresult" ); then
	cat "${tmpdir}/lastresult"
	die "ALERT: package ${srpm} FAILED SECURITY VERIFICATION"
    fi

    if ( ! grep -q "gpg" "${tmpdir}/lastresult" ); then
	no_gpg=1
    fi

    if ( ! grep -q "pgp" "${tmpdir}/lastresult" ); then
	no_pgp=1
    fi

    if ( ! grep -q "rsa" "${tmpdir}/lastresult" ); then
	no_rsa=1
    fi

    if ( ! grep -q "dsa" "${tmpdir}/lastresult" ); then
	no_dsa=1
    fi

    keychecks=$(( ${no_gpg} + ${no_pgp} + ${no_rsa} + ${no_dsa} ))
    if ((! ${keychecks})); then
	die "ALERT: package ${srpm} FAILED SECURITY VERIFICATION- NOT SIGNED WITH A KEY (GPG/PGP/RSA/DSA)"
    fi

    num_checked=$(( ${num_checked} + 1 ))

    status "all packages verified thus far are good (${num_checked}/${num_pkgs_total}) ..."

    rm -f "${tmpdir}/lastresult"


done

#############################################################################
#############################################################################
