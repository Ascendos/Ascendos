#!/bin/bash
#
#############################################################################
#############################################################################
#
# functions: utility functions
#
#############################################################################
#
# Copyright 2007-2011 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
# This file is part of X.
#
#    X is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    X is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with X.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################


#############################################################################
#############################################################################
##
## X funcions
##
## utility functions for ${x_toolname} scripts
##

#############################################################################
##
## set default values for undefined globals that are used
##
if [ "${x_debug}" == "" ]; then
    x_debug=0
fi

if [ "${x_verbose}" == "" ]; then
    x_verbose=0
fi

if [ "${x_quiet}" == "" ]; then
    x_quiet=0
fi

if [ "${progname}" == "" ]; then
    progname="libx.sh functions"
fi

if [ "${logfiles}" == "" ]; then
    logfiles="/dev/null"
fi

if [ "${cleanup_command}" == "" ]; then
    cleanup_command="echo cleaning up..."
fi


#############################################################################
#############################################################################
#
# usage: normalize_path <path>
#
# normalize_path will take a path to a file or directory, and return
# an equivalent non-relative (non-symlink?) path
#
# globals used: none
#
function normalize_path {
    result=$( cd $( dirname "${1}" ) ; pwd )/$( basename "${1}" )
    if (($?)); then
	die "unexpected problem normalizing path ${1}"
    else
	echo "${result}"
    fi
}


#############################################################################
#############################################################################
#
# usage: status <message...>
#
# wrapper for sending status messages to console and log
#
# globals used: x_quiet, progname, logfiles(not required)
#
function status {
    time="$( date +%Y/%m/%d-%H:%M:%S )"
    if ((! "${x_quiet}")); then
	echo "${progname}: ${time}: status: $@"
    fi
    for logfile in ${logfiles}; do
	echo "${progname}: ${time}: status: $@" >> "${logfile}"
    done
}

#############################################################################
#############################################################################
#
# usage: debug <message...>
#
# wrapper for sending debug messages to console and log
#
# globals used: x_debug, progname, logfiles(not required)
#
function debug {
    time="$( date +%Y/%m/%d-%H:%M:%S )"
    if (("${x_debug}")); then
	echo "${progname}: ${time}: debug: $@"
    fi
    for logfile in ${logfiles}; do
	echo "${progname}: ${time}: debug: $@" >> "${logfile}"
    done
}


#############################################################################
#############################################################################
#
# usage: die <message...>
#
# issue last words
#
function die {
    status "$@"
    exit 1
}


#############################################################################
#
# usage: listremove "item" "list"
#
# return a list copy but with an item taken out
#
function listremove {
    item="${1}"
    shift

    for word in ${@}; do
	if [ "${word}" != "${item}" ]; then
	    echo -en "${word} "
	fi
    done
}


#############################################################################
#
# usage: listin "item" "list"
#
# return true if item is in list
#
function listin {
    item="${1}"
    shift

    retval=false
    for word in $@; do
	if [ "${word}" == "${item}" ]; then
	    return 0;
	fi
    done
    return 1
}


#############################################################################
#
# usage: listreverse "list"
#
# returns a given list of words reversed
#
function listreverse {
    numwords=0
    for word in $@; do
	numwords=$(( ${numwords} + 1 ))
	wordlist[${numwords}]="${word}"
    done
    for (( i=numwords ; ${i} > 0 ; i=$(( ${i} - 1 )) )); do
	echo "${wordlist[${i}]}"
    done
}


#############################################################################
#
# usage: get_asc_version <some-version.asc[.ASCVERSION].src.rpm>
#
# dies if input is not a proper .asc[.ASCVERSION].src.rpm, and returns
# ASCVERSION, or the special 0 value for no suffixed version
#
function get_asc_version {
    if ( echo "$@" | grep -q "\.asc\.src\.rpm$" ); then
	echo 0
    elif ( ! echo "$@" | grep -q "\.asc\.[0-9]*\.src\.rpm$" ); then
	die "no asc version because $@ is not a .asc.*src.rpm"
    else
	echo "$@" | sed -e 's/.*\.asc\.\([0-9]*\)\.src\.rpm$/\1/'
    fi
}


#############################################################################
#
# usage: set_asc_version <version> <some-version.asc[.ASCVERSION].src.rpm>
#
# returns the given asc style package name, but with alternate version
#
function set_asc_version {
    version="${1}"
    shift

    if ( ! echo "$@" | grep -q "\.asc\.src\.rpm$" ); then
	if ( ! echo "$@" | grep -q "\.asc\.[0-9]\+\.src\.rpm$" ); then
	    die "set_asc_version: non-well-formatted asc src rpm file: $@"
	fi
    fi

    if ((!${version})); then
	if ( echo "$@" | grep -q "\.asc\.src\.rpm$" ); then
	    # in this case, return the same as the input
	    echo "$@"
	else 
	    echo "$@" | sed -e "s/\.asc\.[0-9]\+\.src\.rpm\$/\.asc\.src\.rpm/"
	fi
    else
	if ( echo "$@" | grep -q "\.asc\.src\.rpm$" ); then
	    echo "$@" | sed -e "s/\.asc\.src\.rpm\$/\.asc\.${version}\.src\.rpm/"
	else
	    echo "$@" | sed -e "s/\.asc\.[0-9]\+\.src\.rpm\$/\.asc\.${version}\.src\.rpm/"
	fi
    fi
}


#############################################################################
#
# usage: old_school_crypto <string>
#
# probably overkill avoidance of explicit TUV referencing
#
function old_school_crypto {
    echo "$@" | tr 'a-zA-Z' 'n-za-mN-ZA-M'
}


#############################################################################
#############################################################################
## EOF: only notes below
#############################################################################
#############################################################################
#
#
