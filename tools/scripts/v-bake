#!/usr/bin/env bash
#
#############################################################################
#############################################################################
#
# v-bake: a complete and deterministic environment for the standard upstream
#         build and compose tools (koji/pungi/livecd-creator) (INNER-VM PART)
#
#############################################################################
#
# Copyright 2011 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
# This file is part of X.
#
#    X is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    X is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with X.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################
# note: if you'd like a different license, just let me know which and why
#############################################################################


#############################################################################
#############################################################################
##
## v-bake
##
##
## DESCRIPTION
##
## v-bake presumes it is run on standard pungi capable platform, e.g.
## SL60/F13/, and proceeds to generate pungi output in a thusly more easily
## reproducible fashion
##
##
## LONG TERM ROADMAP
##
## - probably better if the entire devtree, already being pulled for
##   koji makeworld stuffs, is used, along with libx.sh
## - there needs to be a mode or alternate script with shared parts,
##   that easily allows v-bake to be run 'native' by el-build, without
##   running in a vm (for those that want the speed and can live with the
##   less deterministic and isolated environment/host)
##
## NOTES
##
## - 
##
#############################################################################



#############################################################################
#############################################################################
##
## local constant definitions
##

# for common script library- libx.sh
x_toolname="el-build"
x_prefix=/usr


#############################################################################
#############################################################################
##
## constant and option default definitions
##
fedora_mirror_root="ftp://ftp.linux.ncsu.edu/pub/fedora"
# 10.0.2.2 is the ip address the containing qemu-kvm uses to expose the
# host, which in this case is running apache on port 8421 as non-root
elbuild_docroot="http://10.0.2.2:8421/"
cache_root="${elbuild_docroot}/cache/"

x64outroot=/root/el-build-workarea/output
x32outroot=/var/lib/mock/mock-for-pungi-el6-i386/root/root/el-build-workarea/output
outroot=/root/output

# the f13 ones aren't going to change
# TODO: I couldn't get yumdownloader --source --config= to do what I wanted to, to
#       scriptedly get the latest version in the el-build wrapper's caching section
pigz_version="2.1.6-1"
mock_version="1.1.15-1"
livecdtools_version="13.4-1"


#############################################################################
#############################################################################
##
## main
##

## presumption, this is run as root from /etc/rc.d/rc.local on a system that
## has just had a min-sl60 kickstart installation (basic 'minimal' sl60 install)

#############################################################################
## initialize environment

# keep screen from blanking (perhaps this should be in el-build only)
setterm -blank 0

#############################################################################
## initialize output and workareas
mkdir -p "${outroot}"
cd "${outroot}"
mkdir 6.0
mkdir workarea
mkdir logs
mkdir koji
mkdir devtree
# todo: make this area more of an option/constant
mkdir /root/el-build-workarea
mkdir /root/el-build-workarea/cache
mkdir /root/el-build-workarea/output
cd "${outroot}/workarea"


#############################################################################
## initialize package management

# TODO: obviously hardcoded stuffs that need to be abstracted into config files
#       alongside other target-distro-specifying configs
mv /etc/yum.repos.d /etc/yum.repos.d.orig
mkdir /etc/yum.repos.d
cat <<EOF > /etc/yum.repos.d/sl.repo
[sl]
name=Scientific Linux \$releasever - \$basearch
# yumvars seem pretty stupid, needing to be full directory entries, i.e. this doesn't work,
# nor does \${releasever} work...
#baseurl=${cache_root}ftp.scientificlinux.org___linux__scientific__\$releasever__\$basearch__os/
baseurl=${cache_root}ftp.scientificlinux.org___linux__scientific__6.0__x86_64__os/
#mirrorlist=http://ftp.scientificlinux.org/linux/scientific/mirrorlist/sl-base-6.txt
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-sl file:///etc/pki/rpm-gpg/RPM-GPG-KEY-dawson
EOF

#############################################################################
## get the full devtree
yum -y install wget
wget -q -O - "${elbuild_docroot}devtree.tar.bz2" \
    | tar -C "${outroot}/devtree" -xvjf - 

#############################################################################
##
## load system library (now that it is accessible)
##
if [ ! -f "${outroot}/devtree/Ascendos/tools/scripts/libx.sh" ]; then
    echo "v-bake: FATAL ERROR: libx.sh system library not found"
    # devdebug
    sleep 300
    exit 1
else
    source "${outroot}/devtree/Ascendos/tools/scripts/libx.sh"
fi
##
#############################################################################



#############################################################################
## fetch baking options from the wrapper script
wget -O /tmp/v-bake.options \
    "${elbuild_docroot}v-bake.options"
cp /tmp/v-bake.options \
    "${outroot}/logs/v-bake.options"
# enumerated here for early reference, overridden by options sourcing below
do_bake_phases="\
compile-sources
installer-traditional-x32
installer-traditional-x64
installer-live-x32
installer-live-x64
stage-layout
"
source "${outroot}/logs/v-bake.options"

#############################################################################
# workaround for what appears to be a pungi bug (no anaconda srpm in output)
cat <<EOF > /etc/yum.repos.d/asc-src.repo
[asc-src]
name=Ascendos - sources
baseurl=${cache_root}build.ascendos.org___linux__ascendos__SRPMS/
enabled=0
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ascendos-alpha file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ascendos-alpha-dmc
EOF
#
yumdownloader --disablerepo=* --enablerepo=asc-src --source anaconda


#############################################################################
# no need for updates (until an os bug requiring one hits us)
#cp /etc/yum.repos.d/sl.repo /etc/yum.repos.d/sl.repo.orig
#mv /etc/yum.repos.d/sl-updates.repo /etc/yum.repos.d/sl-updates.repo.orig
#sed -i \
#    -e 's|http://ftp.scientificlinux.org|ftp://ftp.scientificlinux.org|g' \
#    /etc/yum.repos.d/sl.repo
#
#sed -i \
#    -e "s|ftp://ftp.scientificlinux.org/linux/scientific/\$releasever/\$basearch/os|${cache_root}ftp.scientificlinux.org___linux__scientific__\$releasever__\$basearch__os|g" \
#    /etc/yum.repos.d/sl.repo

# for rpmbuild(--rebuild) and rpmdev-setuptree
yum -y install rpm-build

# for rebuilding pigz
yum -y install gcc
yum -y install zlib-devel

# for general utility 
yum -y install lftp

# for chroot (no doubt pulled in by something else, but
#             currently having chroot not found issues)
yum -y install coreutils

# for rebuilding python-kid
yum -y install python-docutils

# for mock
yum -y install python-decoratortools

# for rebuilding pungi
yum -y install python-devel

# for running pungi
yum -y install anaconda-runtime

# SHOWSTOPPER TODO: just mirror some major chunk of epel along with the
#       other already fairly large bootsrap os repos

# for running pungi to yield i386 media on x86_64 host
#yum -y install epel-release
#yum -y install mock
# or alternately without bringing 'all' of epel into things-

## install pubkeys for verifying .src.rpm signatures


# for yumdownloader workaround downloading of anaconda src.rpm (at least)
#wget "${ascendos_mirror_root}/GPG/RPM-GPG-KEY-ascendos-alpha"
wget "${cache_root}one-off-files/RPM-GPG-KEY-ascendos-alpha"
rpm --import RPM-GPG-KEY-ascendos-alpha
#wget "${ascendos_mirror_root}/GPG/RPM-GPG-KEY-ascendos-alpha-dmc"
wget "${cache_root}one-off-files/RPM-GPG-KEY-ascendos-alpha-dmc"
rpm --import RPM-GPG-KEY-ascendos-alpha-dmc

#wget "${fedora_mirror_root}/linux/releases/13/Everything/i386/os/RPM-GPG-KEY-fedora-13-primary"
wget "${cache_root}one-off-files/RPM-GPG-KEY-fedora-13-primary"
rpm --import RPM-GPG-KEY-fedora-13-primary
#wget "wget ftp://ftp.linux.ncsu.edu/pub/epel/RPM-GPG-KEY-EPEL-6"
wget "${cache_root}one-off-files/RPM-GPG-KEY-EPEL-6"
rpm --import RPM-GPG-KEY-EPEL-6

## TODO: make the following an loop over a list (necessarily ordered)

## get python-kid installed, needed by repoview
#wget "${fedora_mirror_root}/linux/releases/13/Everything/source/SRPMS/python-kid-0.9.6-6.fc13.src.rpm"
wget "${cache_root}one-off-files/python-kid-0.9.6-6.fc13.src.rpm"
if ( ! rpm --checksig python-kid-0.9.6-6.fc13.src.rpm ); then
    die "python-kid signature could not be verified as correct"
fi
rpmbuild --rebuild python-kid-0.9.6-6.fc13.src.rpm
rpm -Uvh /rpmbuild/RPMS/noarch/python-kid-0.9.6-6.el6.noarch.rpm

## get repoview installed, needed by pungi
#wget ${fedora_mirror_root}/linux/releases/13/Everything/source/SRPMS/repoview-0.6.5-1.fc13.src.rpm
wget "${cache_root}one-off-files/repoview-0.6.5-1.fc13.src.rpm"
if ( ! rpm --checksig repoview-0.6.5-1.fc13.src.rpm ); then
    die "repoview signature could not be verified as correct"
fi
rpmbuild --rebuild repoview-0.6.5-1.fc13.src.rpm 
rpm -Uvh /rpmbuild/RPMS/noarch/repoview-0.6.5-1.el6.noarch.rpm


## get pungi
#wget ${fedora_mirror_root}/linux/releases/13/Everything/source/SRPMS/pungi-2.0.21-1.fc13.src.rpm
# note: the f13-updates version of pungi seems to only include a single esoteric one line change
#       which seems needed if and only if some python update has also been applied (e.g. using
#       SL60__+updates__ for the bootstrap repo, which is not currently the default here)
# todo: check to see if f14/++ versions of pungi work without modification and/or have important
#       enhancements or bugfixes.  It's reasonable to start with f13 as that is likely what
#       tuv branched for its own builds (educated guess with no evidence yet to the contrary)
wget "${cache_root}one-off-files/pungi-2.0.21-1.fc13.src.rpm"
if ( ! rpm --checksig pungi-2.0.21-1.fc13.src.rpm ); then
    die "pungi signature could not be verified as correct"
fi
rpmbuild --rebuild pungi-2.0.21-1.fc13.src.rpm
rpm -Uvh /rpmbuild/RPMS/noarch/pungi-2.0.21-1.el6.noarch.rpm

## get livecd-tools for generating installable live media (livecd/dvd/usb etc) images
#wget "ftp://ftp.linux.ncsu.edu/pub/epel/6/SRPMS/livecd-tools-${livecdtools_version}.el6.src.rpm"
wget "${cache_root}one-off-files/livecd-tools-${livecdtools_version}.el6.src.rpm"
if ( ! rpm --checksig "livecd-tools-${livecdtools_version}.el6.src.rpm" ); then
    die "livecd-tools signature could not be verified as correct"
fi
rpmbuild --rebuild "livecd-tools-${livecdtools_version}.el6.src.rpm"
rpm -Uvh /rpmbuild/RPMS/x86_64/{livecd-tools,python-imgcreate}*.rpm

## get zyx-liveinstaller to support rebootless live media installation
# TODO: need an updated version with asc-el6 fixes incorporated rather than worked around in .ks
# TODO: post alpha, depending on consensus, only put zli in a descendent 'DescendOS' 'strain'
#wget "${fedora_mirror_root}/linux/updates/13/SRPMS/zyx-liveinstaller-0.2.4-1.fc13.src.rpm"
wget "${cache_root}one-off-files/zyx-liveinstaller-0.2.4-1.fc13.src.rpm"
if ( ! rpm --checksig zyx-liveinstaller-0.2.4-1.fc13.src.rpm ); then
    die "zyx-liveinstaller signature could not be verified as correct"
fi
rpmbuild --rebuild zyx-liveinstaller-0.2.4-1.fc13.src.rpm


## get pigz installed, needed by mock
#wget ftp://ftp.linux.ncsu.edu/pub/epel/6/SRPMS/pigz-2.1.6-1.el6.src.rpm
wget "${cache_root}one-off-files/pigz-${pigz_version}.el6.src.rpm"
if ( ! rpm --checksig "pigz-${pigz_version}.el6.src.rpm" ); then
    die "pigz signature could not be verified as correct"
fi
rpmbuild --rebuild "pigz-${pigz_version}.el6.src.rpm"
rpm -Uvh "/rpmbuild/RPMS/x86_64/pigz-${pigz_version}.el6.x86_64.rpm"

## get mock installed, needed by pungi-x32(i386 output)
#wget "ftp://ftp.linux.ncsu.edu/pub/epel/6/SRPMS/mock-${mock_version}.el6.src.rpm"
wget "${cache_root}one-off-files/mock-${mock_version}.el6.src.rpm"
if ( ! rpm --checksig "mock-${mock_version}.el6.src.rpm" ); then
    die "mock signature could not be verified as correct"
fi
rpmbuild --rebuild "mock-${mock_version}.el6.src.rpm"
rpm -Uvh "/rpmbuild/RPMS/noarch/mock-${mock_version}.el6.noarch.rpm"


# pungi requires selinux not be enforcing 
# and makeworld too, though perhaps that can be fixed
setenforce 0

## run koji to generate pungi/livecd-create binary rpm input from the full dev tree
# TODO: enumerate the packages koji/makeworld bring in, i.e. look at the epel packages,
#       and see about selectively mirroring/precaching

# TODO: this and similar below should be broken into additional called scripts
if ( listin "compile-sources" "${do_bake_phases}" ); then

    mkfs.ext3 -O sparse_super /dev/sdc
    mkdir /mnt/space
    mount /dev/sdc /mnt/space
    mkdir /mnt/space/el-build
    cp -av "${outroot}/devtree/Ascendos/6/build/koji-setup-scripts" \
	/mnt/space/el-build/scripts

    # TODO: need to add epel or appropriate subset to offline cached mirrors
    #       but for initial testing, just aiming for a first automated
    #       and successful package build
    yum -y install yum-conf-epel

    pushd /mnt/space/el-build/scripts
    bash ./makeworld
    popd

    # todo: fix this in makeworld
    chkconfig postgresql on
    chkconfig httpd on
    chkconfig kojira on

    # dmc: It would be my guess that it is worth 'modifying' more source packages 
    #      such that this list could be reduced to ideally a single entry
    dependent_bootstrap_os_list="\
sl60:http://10.0.2.2:8421/cache/ftp.scientificlinux.org___linux__scientific__6.0/\$arch/os/
f13:http://archives.fedoraproject.org/pub/archive/fedora/linux/releases/13/Everything/\$arch/os/
f12:http://archives.fedoraproject.org/pub/archive/fedora/linux/releases/12/Everything/\$arch/os/
rhel6beta:ftp://mirrors.kernel.org:/pub/redhat/redhat/rhel/beta/6/\arch/os/
"

    # and our build repo
    koji \
	add-external-repo \
	ascendos-build \
	http://build.ascendos.org/linux/ascendos/build/\$arch/

    # experimental
    koji \
	add-tag \
	"ascendos-initial-tag"

    bs_os_abbrevs=""
    # create a build target for each dependent bootstrapping os
    for dependent_bootstrap_os in ${dependent_bootstrap_os_list}; do

	os_repo=$( echo "${dependent_bootstrap_os}" | sed -e 's/[^:]*://' )
	os_abbrev=$( echo "${dependent_bootstrap_os}" | sed -e 's/:.*//' )
	bs_os_abbrevs="${bs_os_abbrevs} ${os_abbrev}"
	
	koji \
	    add-tag \
	    "${os_abbrev}"

	koji \
	    add-tag \
	    --arches "i686,x86_64" \
	    "${os_abbrev}-build"

	koji \
	    add-target \
	    "${os_abbrev}" \
	    "${os_abbrev}-build" \
	    "${os_abbrev}"

	koji \
	    add-group \
	    "${os_abbrev}-build" \
	    build

        # todo: abstract into target-distro-specifying configurations somewhere
	buildroot_minbuild_pkgset="\
bash
bzip2
coreutils
cpio
diffutils
findutils
gawk
gcc
gcc-c++
grep
gzip
info
make
patch
redhat-rpm-config
rpm-build
sed
shadow-utils
tar
unzip
util-linux-ng
which
system-release
buildsys-macros-el6
"
# note: system-release is an experimental replacement for sl-release

	newlist=""
	for item in ${buildroot_minbuild_pkgset}; do
	    newlist="${newlist} ${item}"
	done
	buildroot_minbuild_pkgset="${newlist}"

	status "about to add-group-pkg for ${os_abbrev} ..."
	status \
	koji \
	    add-group-pkg \
	    "${os_abbrev}-build" \
	    build \
	    "${buildroot_minbuild_pkgset}"
	koji \
	    add-group-pkg \
	    "${os_abbrev}-build" \
	    build \
	    "${buildroot_minbuild_pkgset}"

        # create the repo
	status koji add-external-repo "${os_abbrev}-base" "${os_repo}"
	koji \
	    add-external-repo \
	    "${os_abbrev}-base" \
	    "${os_repo}"

        # cause it to be used for builds with abbrev-build build tag (src or dest, I forget)
	status koji add-external-repo "${os_abbrev}-base" -t "${os_abbrev}-build"
	koji \
	    add-external-repo \
	    "${os_abbrev}-base" \
	    -t "${os_abbrev}-build"

        # cause the ascendos-build repo to be used for each of the build-targets
	status koji add-external-repo ascendos-build -t "${os_abbrev}-build"
	koji \
	    add-external-repo \
	    ascendos-build \
	    -t "${os_abbrev}-build"

    done

    # todo, this repo needs to get generated from the new gen-tdv-srpm-repo script, 
    # and the list with the reverse builddate sorting

    if [ "${test_package_list}" != "" ]; then
	srpm_list="${test_package_list}"
    else
        srpm_list=$( lftp -e "cd cache ; cd build.ascendos.org___linux__ascendos__SRPMS ; ls ; quit" http://10.0.2.2:8421/ 2>&1 | awk '{print $5}' | grep "\.src\.rpm$" | sort --sort=version )
    fi

    echo "${srpm_list}" > "${outroot}/logs/koji_tobuild_srpm_list.txt"

    pkg_list=""
    for srpm in ${srpm_list}; do

	status "preprocessing package ... ${srpm} ..."

	pkg_nvr=$( basename "${srpm}" .src.rpm )
	pkg_nv=$( echo "${pkg_nvr}" | sed -e 's/-[^-]*$//' )
	pkg_n=$( echo "${pkg_nv}" | sed -e 's/-[^-]*$//' )
        # better to do this with a local copy of the package and rpm query with format
	pkg_list="${pkg_list} ${pkg_n}"

	status koji \
	    add-pkg \
	    --owner=ascendos-team \
	    ascendos-initial-tag \
	    "${pkg_n}"
	koji \
	    add-pkg \
	    --owner=ascendos-team \
	    ascendos-initial-tag \
	    "${pkg_n}"
    done

#
# NOTE:  The build order algorithm here is currently as follows.  It may
#        well have bugs, or otherwise in use of improvements.  Please discuss
#        any suggestions on the ascendos-dev mailinglist.
#
#        0 note: even this outline is not quite yet fully implemented in logic below,
#                e.g. need to glue in gen-big-board outputs/inputs to this process
#
#        1 the full 'superset' of srpms are collected from tuv's well known published
#          sources (see mirrors.kernel.org/...).  They are reverse sorted by package
#          build order, and epochs between major point releases are noted.
#
#        2 first, the full set of .0 packages are built.  For each package, it is
#          attempted to be built against sl60, then f13, then f12, then rhel6beta.
#          whichever works first wins (near future: hard coded config lists will 
#          be established, presumably not changing frequently)
#
#        2b note: no current 'dogfooding' pass _yet_ of the sources rebuilt again their
#                own first output instead of the original bootstrapping repos.
#
#        3 then updates up to the next epoch are built against that previous output
#          instead of the 4 bootstrap os repos (todo: see if this actually works even
#          for the 'trouble' packages.
#
#        4 then a pointrelease is composed, jump back to 3, repeat ad infinitum
#
#
# BOTTOM LINE: having the logic spelled out in code/script here, makes it much
#              easier to visually compare altering implementational choices/bugs.
#


    pushd  "${outroot}/koji"

    for srpm in ${srpm_list}; do

	xdone=0

	# SHOWSTOPPER TODO: then need to by default get pulled from SRPMS.generated or such
	wget "http://10.0.2.2:8421/cache/build.ascendos.org___linux__ascendos__SRPMS/${srpm}"

	for bs_os in ${bs_os_abbrevs}; do
	    if ((! ${xdone})); then
		status koji \
		    add-pkg \
		    --owner=ascendos-team \
		    "${bs_os}" \
		    "${pkg_n}"
		koji \
		    add-pkg \
		    --owner=ascendos-team \
		    "${bs_os}" \
		    "${pkg_n}"
		status "about to try building ${srpm} against ${bs_os} ..."
		status build --wait "${bs_os}" "${srpm}" 
		if $( koji build --wait "${bs_os}" "${srpm}" 2>&1 | tee -a "${outroot}/logs/${srpm}.kojibuild.log" ); then
#		rm -f "${srpm}"
		    mv "${srpm}" "${srpm}".pre-compile-phase
		    pkg_nvr=$( basename "${srpm}" .src.rpm )
		    koji download-build "${pkg_nvr}"
		    status "seemed to build ok..."
		    xdone=1
		else
		    status "seemed to *NOT* build ok..."
		fi
	    fi
	done
    done

    popd

fi


# SHOWSTOPPER TODO: iterate over input packages and use el-push to arrange into
#       an output structure suitable for pungi here below (instead of 
#       its current use of published builds) (note, need a devtest nosign opt for el-push)

if ( listin "installer-traditional-x64" "${do_bake_phases}" ); then

    ## run pungi non-mock for x86_64 (TODO: may as well run it under mock for consistency)

    # TODO: see if there is a better pungi kickstart to start from in the spin-kickstarts
    #       package, versus the one currently being based on from the pungi package itself.

    # TODO: share pungi arch kickstarts with %include and ksflatten 

    # TODO: start with abstracting bugurl away, then do the rest
    
    pungi \
	--cachedir=/root/el-build-workarea/cache \
	--destdir=/root/el-build-workarea/output \
	--name=Ascendos \
	--ver=6.0 \
	--bugurl=http://bugzilla.ascendos.org \
	--fulltree \
	--selfhosting \
	--nosplitmedia \
	--config="${elbuild_docroot}pungi-x86_64.ks"
    
fi

if ( listin "installer-traditional-x32" "${do_bake_phases}" ); then

    mockroot=/var/lib/mock/mock-for-pungi-el6-i386/root

    adduser xmock
    usermod -a -G mock xmock

    wget -O /etc/mock/mock-for-pungi-el6-i386.cfg \
	"${elbuild_docroot}mock-for-pungi-el6-i386.cfg"
    
    su - xmock -c "mock -r mock-for-pungi-el6-i386 --init"
    su - xmock \
	-c "mock -r mock-for-pungi-el6-i386 --no-clean --install wget"
    su - xmock \
	-c "mock -r mock-for-pungi-el6-i386 --no-clean --install anaconda-runtime"

    mkdir -p "${mockroot}/root"
    mkdir -p "${mockroot}/root/el-build-workarea"
    mkdir -p "${mockroot}/root/el-build-workarea/cache"

    # potential runtime enhancements to be explored:
    #  - share the prior x86_64 cache with the i386 under mock run
    #  - use non-usermode qemu/kvm networking if available,
    #   - or xfer the cache once as a tar file image attached as disk.
    #  - using any available free lvm space for disks instead of qemu-img ones.
    #   - i.e. el-build can-use /dev/sdb (vg_elbuild would be automatically used if avail)
    # (ortho: and a 'el-build set-workarea' to auto move ~/.el-build 
    #         e.g. under a dift mountpoint)
    mount --bind \
	/root/el-build-workarea/cache \
	"${mockroot}/root/el-build-workarea/cache"

    mkdir -p "${mockroot}/root/el-build-workarea/output"

    cp -av /rpmbuild/RPMS/noarch/python-kid-0.9.6-6.el6.noarch.rpm \
	"${mockroot}/root/"
    su - xmock \
	-c "mock -r mock-for-pungi-el6-i386 --no-clean --shell '\
rpm -Uvh /root/python-kid-\*.rpm'"

    cp -av /rpmbuild/RPMS/noarch/repoview-0.6.5-1.el6.noarch.rpm \
	"${mockroot}/root/"
    su - xmock \
	-c "mock -r mock-for-pungi-el6-i386 --no-clean --shell '\
rpm -Uvh /root/repoview-\*.rpm'"

    cp -av /rpmbuild/RPMS/noarch/pungi-2.0.21-1.el6.noarch.rpm \
	"${mockroot}/root/"
    su - xmock \
	-c "mock -r mock-for-pungi-el6-i386 --no-clean --shell '\
rpm -Uvh /root/pungi-\*.rpm'"
    
    # note sure about what works for multilinebreaking here, too tired to care
    su - xmock \
	-c "mock -r mock-for-pungi-el6-i386 --verbose --no-clean --chroot '\
pungi \
  --cachedir=/root/el-build-workarea/cache \
  --destdir=/root/el-build-workarea/output \
  --name=Ascendos \
  --ver=6.0 \
  --bugurl=http://bugzilla.ascendos.org \
  --fulltree \
  --selfhosting \
  --nosplitmedia \
  --config=${elbuild_docroot}pungi-i386.ks'" 
    
    # undo the bind mount
    umount "${mockroot}/root/el-build-workarea/cache"

fi

if ( listin "installer-live-x32" "${do_bake_phases}" ); then

    mkdir /root/el-build-workarea
    mkdir /root/el-build-workarea/cache
    mkdir /root/el-build-workarea/tmp

    pushd /root/el-build-workarea
    wget "${elbuild_docroot}livecd-desktop-i386.ks"
    ## install rebootless installation goodness
    cat <<EOF >> "livecd-desktop-i386.ks"
%post --nochroot
cp /rpmbuild/RPMS/noarch/zyx-liveinstaller-0.2.4-1.el6.noarch.rpm \$INSTALL_ROOT/tmp/zyx-liveinstaller-0.2.4-1.el6.noarch.rpm
# todo: perhaps yum localinstall is better
/usr/sbin/chroot \$INSTALL_ROOT rpm -Uvh /tmp/zyx-liveinstaller-0.2.4-1.el6.noarch.rpm
rm -f \$INSTALL_ROOT/tmp/zyx-liveinstaller-0.2.4-1.el6.noarch.rpm

sed -i -e "s/fedora-release/ascendos-release/g" \$INSTALL_ROOT/usr/sbin/zyx-liveinstaller-cli
echo "Ascendos Alpha RuleZ" > \$INSTALL_ROOT/etc/zyx-liveinstaller.install.txt
# on 6.0-alpha zli seems very slow, no need to clutter apps menu with this very,
# alpha/experimental tool.  But still, nice to have as an option from the cli
rm -f \$INSTALL_ROOT/usr/share/applications/zyx-liveinstaller.desktop
EOF
    livecd-creator \
	--verbose \
	--cache=/root/el-build-workarea/cache \
	--tmpdir=/root/el-build-workarea/tmp \
	--logfile=/root/el-build-workarea/livecd-desktop-x32.log \
	--fslabel="asc60_livecd_desktop_x32" \
	--config=livecd-desktop-i386.ks \
	2>&1 | tee -a "${outroot}/logs/livecd-desktop-x32.console.log"

    mkdir -p "${x32outroot}/6.0/i386/iso"
    mv asc60_livecd_desktop_x32.iso \
	"${x32outroot}/6.0/i386/iso/Ascendos-6.0-i386-LiveCD-Desktop.iso"
    mv /root/el-build-workarea/livecd-desktop-x32.log \
	"${outroot}/logs/"
    mv /root/el-build-workarea/livecd-desktop-i386.ks \
	"${outroot}/logs/"

fi
    
if ( listin "installer-live-x64" "${do_bake_phases}" ); then

    wget "${elbuild_docroot}livecd-desktop-x86_64.ks"
    ## install rebootless installation goodness
    cat <<EOF >> "livecd-desktop-x86_64.ks"
%post --nochroot
cp /rpmbuild/RPMS/noarch/zyx-liveinstaller-0.2.4-1.el6.noarch.rpm \$INSTALL_ROOT/tmp/zyx-liveinstaller-0.2.4-1.el6.noarch.rpm
# todo: perhaps yum localinstall is better
rpm -Uvh \$INSTALL_ROOT/tmp/zyx-liveinstaller-0.2.4-1.el6.noarch.rpm
rm -f \$INSTALL_ROOT/tmp/zyx-liveinstaller-0.2.4-1.el6.noarch.rpm

sed -i -e "s/fedora-release/ascendos-release/g" \$INSTALL_ROOT/usr/sbin/zyx-liveinstaller-cli
echo "Ascendos Alpha RuleZ" > \$INSTALL_ROOT/etc/zyx-liveinstaller.install.txt
# on 6.0-alpha zli seems very slow, no need to clutter apps menu with this very,
# alpha/experimental tool.  But still, nice to have as an option from the cli
rm -f \$INSTALL_ROOT/usr/share/applications/zyx-liveinstaller.desktop
EOF
    livecd-creator \
	--verbose \
	--cache=/root/el-build-workarea/cache \
	--tmpdir=/root/el-build-workarea/tmp \
	--logfile=/root/el-build-workarea/livecd-desktop-x64.log \
	--fslabel="asc60_livecd_desktop_x64" \
	--config=livecd-desktop-x86_64.ks \
	2>&1 | tee -a "${outroot}/logs/livecd-desktop-x64.console.log"

    mkdir -p "${x64outroot}/6.0/x86_64/iso"
    mv asc60_livecd_desktop_x64.iso \
	"${x64outroot}/6.0/x86_64/iso/Ascendos-6.0-x86_64-LiveCD-Desktop.iso"
    mv /root/el-build-workarea/livecd-desktop-x64.log \
	"${outroot}/logs/"
    mv /root/el-build-workarea/livecd-desktop-x86_64.ks \
	"${outroot}/logs/"
    popd

fi

# .composeinfo
mv "${x64outroot}/6.0/.composeinfo" \
    "${outroot}/6.0/.composeinfo.x86_64"
mv "${x32outroot}/6.0/.composeinfo" \
    "${outroot}/6.0/.composeinfo.i386"

# logs
mkdir "${outroot}/logs"
mv "${x64outroot}/logs/"* \
    "${outroot}/logs/"
mv "${x32outroot}/logs/"* \
    "${outroot}/logs/"
mv "${x64outroot}/deleted.x86_64.SRPMS.txt" \
    "${outroot}/logs/"
mv /root/anaconda-ks.cfg \
    "${outroot}/logs/build-host.anaconda-ks.cfg"
mv /root/install.log \
    "${outroot}/logs/build-host.install.log"
mv /root/install.log.syslog \
    "${outroot}/logs/build-host.install.log.syslog"
cp /root/x-run.log \
    "${outroot}/logs/x-run.partial.log"

# work
mkdir "${outroot}/work"
mv "${x64outroot}/work/"* \
    "${outroot}/work/"
mv "${x32outroot}/work/"* \
    "${outroot}/work/"

#
# main output arangement
#
# SHOWSTOPPER TODO: need pluggable modules here to provide one or more user specifyable
#                   final output arrangements (using hardlinks)

# main stuffs
mv "${x64outroot}/6.0/x86_64" \
    "${outroot}/6.0/"
mv "${x32outroot}/6.0/i386" \
    "${outroot}/6.0/"

## sources
mv "${x32outroot}/6.0/source" \
    "${outroot}/6.0/"

# carefully merge x32 and x64 sources
for srpm in $( ls -1A "${x64outroot}/6.0/source/SRPMS/*.src.rpm" ); do
    srpm_base=$( basename "${srpm}" )
    if [ -f "{outroot}/6.0/source/SRPMS/${srpm_base}" ]; then
	status "x32 already has x64 src.rpm of the same name: ${srpm}"
	if ( ! diff -q "${srpm}" "${x32outroot}/6.0/source/SRPMS/${srpm_base}" ); then
	    status "assertion failed: about to ls -l the two files"
	    status ls -l "${srpm}" "${x32outroot}/6.0/source/SRPMS/${srpm_base}"
	    ls -l "${srpm}" "${x32outroot}/6.0/source/SRPMS/${srpm_base}"
	    die "danger danger: differing x32 and x64 srpms with the same name: ${srpm}"
	fi
    else
	status "copying x64 only src.rpm into place: ${srpm}"
	cp "${srpm}" "${outroot}/6.0/source/SRPMS/"
    fi
done


# bug workaround (TODO a bit cleaner after the first test)
cp /root/anaconda*.src.rpm \
    "${outroot}/6.0/source/SRPMS/"


# prepare output for the external user
if [ -f /tmp/disk-sdb-is-going-to-get-overwritten ]; then
    cd "${outroot}"
    tar -cvf /dev/sdb . 
fi

# done

#############################################################################
## end script - only notes below
#############################################################################
#
#



