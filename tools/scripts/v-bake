#!/usr/bin/env bash
#
#############################################################################
#############################################################################
#
# v-bake: a complete and deterministic environment for the standard upstream
#         build and compose tools (koji/pungi/livecd-creator) (INNER-VM PART)
#
#############################################################################
#
# Copyright 2011 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
# This file is part of X.
#
#    X is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    X is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with X.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################
# note: if you'd like a different license, just let me know which and why
#############################################################################


#############################################################################
#############################################################################
##
## v-bake
##
##
## DESCRIPTION
##
## v-bake presumes it is run on standard pungi capable platform, e.g.
## SL60/F13/, and proceeds to generate pungi output in a thusly more easily
## reproducible fashion
##
##
## LONG TERM ROADMAP
##
## - there needs to be a mode or alternate script with shared parts,
##   that easily allows v-bake to be run 'native' by el-build, without
##   running in a vm (for those that want the speed and can live with the
##   less deterministic and isolated environment/host)
##
## NOTES
##
## - 
##
#############################################################################


## TODO
##
##  - use recent success with yum(downloader) --config --installroot to
##    un-hardcodify versions
##  - though with above, best to migrate the critical things to the build
##    repo, or ideally, the entire build repo generatable from the devtree
##  - it'll be no trivial amount of work fixing bugs / finishing the details
##    of jumping past the base/updates time thresholds (i.e. all the
##    use of x_bake_distrover are basically indicators of the likely places
##    where extra steps will need to be taken to do things correctly)


#############################################################################
#############################################################################
##
## local constant definitions
##

# for common script library- libx.sh
x_toolname="el-build"
x_prefix=/usr

# to enable debug messages if desired
x_debug=1

# to suppress status messages if desired
x_quiet=0


#############################################################################
#############################################################################
##
## constant and option default definitions
##
x64outroot=/root/el-build-workarea/output
x32outroot=/var/lib/mock/mock-for-pungi-el6-i386/root/root/el-build-workarea/output
outroot=/root/output


#############################################################################
#############################################################################
##
## main
##

## presumption, this is run as root from /etc/rc.d/rc.local on a system that
## has just had a min-sl60 kickstart installation (basic 'minimal' sl60 install)

#############################################################################
## initialize environment

# for the parent vm to quiesce(sp?)
clear
# no status function until libx.sh is brought in
echo "vbake: early status: giving host a minute just in case ..."
sleep 24
clear
echo "v-bake: early status: initializing environment ..."

# keep screen from blanking (perhaps this should be in el-build only)
echo "v-bake: early status: disabling terminal blanking/screensaver ..."
setterm -blank 0

#############################################################################
## initialize output and workareas
mkdir -p "${outroot}"
cd "${outroot}"
mkdir workarea
mkdir logs
mkdir koji
mkdir devtree
# todo: make this area more of an option/constant
mkdir /root/el-build-workarea
mkdir /root/el-build-workarea/glibc32
mkdir /root/el-build-workarea/cache
mkdir /root/el-build-workarea/output
cd "${outroot}/workarea"


#############################################################################
## initialize package management

# TODO: obviously hardcoded stuffs that need to be abstracted into config files
#   alongside other target-distro-specifying configs
#    - perhaps 6/6.0/configs/oven.repo
mv /etc/yum.repos.d /etc/yum.repos.d.orig

mkdir /etc/yum.repos.d

# todo: this is more than a little ugly
#  - circular dependency
#   - wget depends on yum config
#    - yum config depends on elbuild_docroor and cache_root defninitions here
#     - but defs as they should be depend on devtree downloaded
#      - and devtree downloading depends on wget..........
#   - could be considered resolved by presuming success of el-build bake in
#     providing baking vm with wget, as it in fact goes to ks lengths to do
#  - and the distrover variable dependency
elbuild_doc_root="http://10.0.2.2:8421"
elbuild_cache_root="${elbuild_doc_root}/cache"
x_bake_distrover="6.0"

cat <<EOF > /etc/yum.repos.d/el-build-baking.repo

[sl]
name=Scientific Linux \$releasever - \$basearch
# yumvars seem pretty stupid, needing to be full directory entries, i.e. this doesn't work,
# nor does \${releasever} work...
#baseurl=${elbuild_cache_root}/ftp/ftp.scientificlinux.org/linux/scientific/\$releasever/\$basearch/os/
#baseurl=${elbuild_cache_root}/ftp/ftp.scientificlinux.org/linux/scientific/${x_bake_distrover}/x86_64/os/
# note: but it had to be worked around in the cache for koji anyway
baseurl=${elbuild_cache_root}/ftp/ftp.scientificlinux.org/linux/scientific/${x_bake_distrover}/\$basearch/os/
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-sl file:///etc/pki/rpm-gpg/RPM-GPG-KEY-dawson

[sl-source]
name=Scientific Linux \$releasever Alpha - Source
#baseurl=http://ftp.scientificlinux.org/linux/scientific/\$releasever/SRPMS/
#                http://ftp1.scientificlinux.org/linux/scientific/\$releasever/SRPMS/
#                http://ftp2.scientificlinux.org/linux/scientific/\$releasever/SRPMS/
#                ftp://ftp.scientificlinux.org/linux/scientific/\$releasever/SRPMS/
baseurl=${elbuild_cache_root}/ftp/ftp.scientificlinux.org/linux/scientific/6x/SRPMS/
enabled=0
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-sl file:///etc/pki/rpm-gpg/RPM-GPG-KEY-dawson


[epel]
name=Extra Packages for Enterprise Linux 6 - \$basearch
#baseurl=http://download.fedoraproject.org/pub/epel/6/\$basearch
#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&arch=\$basearch
baseurl=${elbuild_cache_root}/ftp/mirrors.kernel.org/pub/fedora-epel/6/x86_64/
failovermethod=priority
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6

[epel-source]
name=Extra Packages for Enterprise Linux 6 - \$basearch - Source
#baseurl=http://download.fedoraproject.org/pub/epel/6/SRPMS
#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-source-6&arch=\$basearch

baseurl=${elbuild_cache_root}/ftp/mirrors.kernel.org/pub/fedora-epel/6/SRPMS/
failovermethod=priority
enabled=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6
gpgcheck=1

EOF


#############################################################################
## get the full devtree
# todo: instead of invoking yum here, just try urlgrabber, then wget in
#   that order, and die if neither is installed.  it is entirely reasonable
#   to put the responsibility on bake to ensure a sufficient min env.
yum -y install wget
wget -q \
    -O "${outroot}/workarea/devtree.tar.bz2" \
    "${elbuild_doc_root}/devtree.tar.bz2"
tar \
    -C "${outroot}/devtree" \
    -xvf "${outroot}/workarea/devtree.tar.bz2"


#############################################################################
##
## load system library (now that it is accessible)
##
if [ ! -f "${outroot}/devtree/Ascendos/tools/scripts/libx.sh" ]; then
    echo "v-bake: FATAL ERROR: libx.sh system library not found"
    exit 1
else
    source "${outroot}/devtree/Ascendos/tools/scripts/libx.sh"
fi
##
#############################################################################


#############################################################################
### derived constants (sigh...)
# 10.0.2.2 is the ip address the containing qemu-kvm uses to expose the
# host, which in this case is running apache on port 8421 as non-root
elbuild_doc_root="http://${x_builder_vm_host_ip}:${x_builder_user_httpd_port}"
elbuild_cache_root="${elbuild_doc_root}/cache"

# derived initialization
mkdir -p "${outroot}/${x_bake_distrover}"

#############################################################################
## fetch baking options from the wrapper script
wget -O /tmp/v-bake.options \
    "${elbuild_doc_root}/v-bake.options"
cp /tmp/v-bake.options \
    "${outroot}/logs/v-bake.options"
# enumerated here for early reference, overridden by options sourcing below
do_bake_phases="\
compile-sources
installer-traditional-x32
installer-traditional-x64
installer-live-x32
installer-live-x64
stage-layout
"
source "${outroot}/logs/v-bake.options"


#############################################################################
# workaround for what appears to be a pungi bug (no anaconda srpm in output)
# TODO: use cleaner yum installroot/config method as working in gen-glibc32...
cat <<EOF > /etc/yum.repos.d/el-build-bake-src.repo
[el-build-bake-src]
name=${x_bake_distroname} - sources
# todo: this needs to be defaults/config tunable
baseurl=${elbuild_cache_root}/tdv.SRPMS/
enabled=0
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ascendos-alpha file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ascendos-alpha-dmc
EOF
# fetch the src.rpm from the above defined repo
yumdownloader --disablerepo=* --enablerepo=el-build-bake-src --source anaconda


#############################################################################
# no need for updates (until an os bug requiring one hits us)
#cp /etc/yum.repos.d/sl.repo /etc/yum.repos.d/sl.repo.orig
#mv /etc/yum.repos.d/sl-updates.repo /etc/yum.repos.d/sl-updates.repo.orig
#sed -i \
#    -e 's|http://ftp.scientificlinux.org|ftp://ftp.scientificlinux.org|g' \
#    /etc/yum.repos.d/sl.repo
#
#sed -i \
#    -e "s|ftp://ftp.scientificlinux.org/linux/scientific/\$releasever/\$basearch/os|${elbuild_cache_root}/ftp/ftp.scientificlinux.org/linux/scientific/\$releasever/\$basearch/os|g" \
#    /etc/yum.repos.d/sl.repo
#sed -i \
#    -e "s|ftp://ftp.scientificlinux.org/linux/scientific/\$releasever/\$basearch/os|${elbuild_cache_root}/ftp/ftp.scientificlinux.org/linux/scientific/\$releasever/\$basearch/os|g" \
#    /etc/yum.repos.d/sl.repo


# for rpmbuild(--rebuild) and rpmdev-setuptree
yum -y install rpm-build
yum -y install rpmdevtools

# for rebuilding pigz
yum -y install gcc
yum -y install zlib-devel

# for general utility 
yum -y install lftp
# dmc wuz here
yum -y install emacs

# for chroot (no doubt pulled in by something else, but
#             currently having chroot not found issues)
yum -y install coreutils

# for rebuilding python-kid
yum -y install python-docutils

# for mock
yum -y install python-decoratortools

# for rebuilding pungi
yum -y install python-devel

# for running pungi
yum -y install anaconda-runtime

## install pubkeys for verifying .src.rpm signatures
# trust our own copies of the keys, instead of theoretical mitm 
# during the download of the src.rpms from the same server
rpm --import \
    "${outroot}/devtree/Ascendos/infra/security/keys/RPM-GPG-KEY-"*

## TODO: make the following an loop over a list (necessarily ordered)


#############################################################################
##
## get pungi installed
##

## get python-kid installed, needed by repoview
wget "${elbuild_cache_root}/http/archive.fedoraproject.org/pub/archive/fedora/linux/releases/13/Everything/source/SRPMS/python-kid-0.9.6-6.fc13.src.rpm"
if ( ! rpm --checksig python-kid-0.9.6-6.fc13.src.rpm ); then
    die "python-kid signature could not be verified as correct"
fi
rpmbuild --rebuild python-kid-0.9.6-6.fc13.src.rpm
rpm -Uvh /rpmbuild/RPMS/noarch/python-kid-0.9.6-6.el6.noarch.rpm

## get repoview installed, needed by pungi
wget "${elbuild_cache_root}/http/archive.fedoraproject.org/pub/archive/fedora/linux/releases/13/Everything/source/SRPMS/repoview-0.6.5-1.fc13.src.rpm"
if ( ! rpm --checksig repoview-0.6.5-1.fc13.src.rpm ); then
    die "repoview signature could not be verified as correct"
fi
rpmbuild --rebuild repoview-0.6.5-1.fc13.src.rpm 
rpm -Uvh /rpmbuild/RPMS/noarch/repoview-0.6.5-1.el6.noarch.rpm


## get pungi
# note: the f13-updates version of pungi seems to only include a single esoteric one line change
#       which seems needed if and only if some python update has also been applied (e.g. using
#       SL60/+updates/ for the bootstrap repo, which is not currently the default here)
# todo: check to see if f14/++ versions of pungi work without modification and/or have important
#       enhancements or bugfixes.  It's reasonable to start with f13 as that is likely what
#       tuv branched for its own builds (educated guess with no evidence yet to the contrary)
wget "${elbuild_cache_root}/http/archive.fedoraproject.org/pub/archive/fedora/linux/releases/13/Everything/source/SRPMS/pungi-2.0.21-1.fc13.src.rpm"
if ( ! rpm --checksig pungi-2.0.21-1.fc13.src.rpm ); then
    die "pungi signature could not be verified as correct"
fi
rpmbuild --rebuild pungi-2.0.21-1.fc13.src.rpm
rpm -Uvh /rpmbuild/RPMS/noarch/pungi-2.0.21-1.el6.noarch.rpm


#############################################################################
##
## get livecd-tools installed
##

## get livecd-tools for generating installable live media (livecd/dvd/usb etc) images
wget "${elbuild_cache_root}/ftp/mirrors.kernel.org/pub/fedora-epel/6/SRPMS/livecd-tools-${x_livecdtools_version}.el6.src.rpm"
if ( ! rpm --checksig "livecd-tools-${x_livecdtools_version}.el6.src.rpm" ); then
    die "livecd-tools signature could not be verified as correct"
fi
rpmbuild --rebuild "livecd-tools-${x_livecdtools_version}.el6.src.rpm"
rpm -Uvh /rpmbuild/RPMS/x86_64/{livecd-tools,python-imgcreate}*.rpm

#############################################################################
##
## (opt) get zyx-liveinstaller to support rebootless live media installation
##
if (("${x_enable_rebootless_liveos_installer_installation}")); then
    #wget "http://cloudsession.com/dawg/downloads/zyx-liveinstaller/zyx-liveinstaller-0.2.8-1.src.rpm"
    wget "${elbuild_cache_root}one-off-files/zyx-liveinstaller-0.2.8-1.src.rpm"
    # not gpg signed yet, for now, el-build and zyx-liveinstaller lead-devs the same person
    if ( ! rpm --checksig zyx-liveinstaller-0.2.8-1.src.rpm ); then
	die "zyx-liveinstaller signature could not be verified as correct"
    fi
    rpmbuild --rebuild zyx-liveinstaller-0.2.8-1.src.rpm
fi


#############################################################################
##
## get mock installed (for pungi)
##

# install mock from epel
yum -y install mock


#############################################################################
##
## prep system for build
##

# pungi requires selinux not be enforcing 
# and makeworld too, though perhaps that can be fixed
setenforce 0


#############################################################################
##
## do bake, phase by optional phase
##

# TODO: these should be broken into additional called scripts

#############################################################################
## run koji to generate installer iso binary rpm input from the full dev tree
if ( listin "compile-sources" "${do_bake_phases}" ); then

    # set up space provided to the vm by the parent bake script
    mkfs.ext3 -O sparse_super /dev/sdc
    mkdir /mnt/space
    mount /dev/sdc /mnt/space
    mkdir /mnt/space/el-build

    # install the koji setup scripts
    cp -av "${outroot}/devtree/Ascendos/6/build/koji-setup-scripts" \
	/mnt/space/el-build/scripts

    # run the koji setup scripts
    # TODO: see if pushd/popd are really needed or if full path works
    pushd /mnt/space/el-build/scripts
    bash ./makeworld
 
# note: will readd this once we have the qa in place or otherwise notice the
# problems that this may solve (turns out it wasn't the grub issue after all)   
#    mv /etc/mock/site-defaults.cfg \
#	/etc/mock/site-defaults.cfg.prebake
#    # TODO: its a start, worry about 6.1 when 6.0 fully works
#    # TODO: also abstract away appropriately(AAA)
#    cp "${outroot}/devtree/Ascendos/6/${x_bake_distrover}/configs/mock.site-defaults.cfg" \
#	/etc/mock/site-defaults.cfg
    popd

    # todo: fix this in makeworld
    chkconfig postgresql on
    chkconfig httpd on
    chkconfig kojira on

    # and our build repo
    koji \
	add-external-repo \
	ascendos-build \
	"${elbuild_cache_root}/http/build.ascendos.org/linux/ascendos/build/\$arch"

    # create a build target for each dependent bootstrapping os
    bs_os_abbrevs=""
    def_bs_os=""
    for dependent_bootstrap_os in ${x_dependent_bootstrap_os_list}; do
	os_repo=$( echo "${dependent_bootstrap_os}" | sed -e 's/[^:]*://' )
	os_abbrev=$( echo "${dependent_bootstrap_os}" | sed -e 's/:.*//' )
	# choose the first in the list as the default to build packages against
	if [ "${def_bs_os}" == "" ]; then
	    def_bs_os="${os_abbrev}"
	fi
	bs_os_abbrevs="${bs_os_abbrevs} ${os_abbrev}"
	
	koji \
	    add-tag \
	    "${os_abbrev}"

	koji \
	    add-tag \
	    --arches "i686,x86_64" \
	    "${os_abbrev}-build"

	koji \
	    add-target \
	    "${os_abbrev}" \
	    "${os_abbrev}-build" \
	    "${os_abbrev}"

	koji \
	    add-group \
	    "${os_abbrev}-build" \
	    build

        # todo: abstract into target-distro-specifying configurations somewhere
	buildroot_minbuild_pkgset="\
bash
bzip2
coreutils
cpio
diffutils
findutils
gawk
gcc
gcc-c++
grep
gzip
info
make
patch
redhat-rpm-config
rpm-build
sed
shadow-utils
tar
unzip
util-linux-ng
which
system-release
buildsys-macros-el6
"

	newlist=""
	for item in ${buildroot_minbuild_pkgset}; do
	    newlist="${newlist} ${item}"
	done
	buildroot_minbuild_pkgset="${newlist}"

	status "about to add-group-pkg for ${os_abbrev} ..."
	status \
	koji \
	    add-group-pkg \
	    "${os_abbrev}-build" \
	    build \
	    ${buildroot_minbuild_pkgset}
	koji \
	    add-group-pkg \
	    "${os_abbrev}-build" \
	    build \
	    ${buildroot_minbuild_pkgset}

	# TODO: perhaps allow non-cached builds by only doing this munging
	#   if a mirror-status-flagfile can be retrieved
	os_repo_prefix=$( echo "${os_repo}" \
	    | sed -e 's/\/\$arch.*//' )
	showvar os_repo_prefix
	os_repo_suffix=$( echo "${os_repo}" \
	    | sed -e 's/.*\$arch\///' )

# todo: get_cached_path not currently work so well with http:// due to use of readlink
#	os_repo_for_koji=$( get_cached_path \
#	    "http://${x_builder_vm_host_ip}:${x_builder_user_httpd_port}/cache" \
#	    "${os_repo}" )
	os_repo_for_koji=$( get_cached_path \
	    "" \
	    "${os_repo}" )
	os_repo_for_koji="http://${x_builder_vm_host_ip}:${x_builder_user_httpd_port}/cache${os_repo_for_koji}"
	showvar os_repo_for_koji

        # create the repo
	status koji add-external-repo "${os_abbrev}-base" "${os_repo_for_koji}"
	koji \
	    add-external-repo \
	    "${os_abbrev}-base" \
	    "${os_repo_for_koji}"
	    

        # cause it to be used for builds with ${os_abbrev}-build build tag 
	status koji add-external-repo "${os_abbrev}-base" -t "${os_abbrev}-build"
	koji \
	    add-external-repo \
	    "${os_abbrev}-base" \
	    -t "${os_abbrev}-build"

        # cause the ascendos-build repo to be used for each of the build-targets
	status koji add-external-repo ascendos-build -t "${os_abbrev}-build"
	koji \
	    add-external-repo \
	    ascendos-build \
	    -t "${os_abbrev}-build"

	# generate a glibc32 helper package/repo needed for koji to build grub
	mkdir -p "/root/el-build-workarea/glibc32/${os_abbrev}"
	mkdir -p "/root/el-build-workarea/glibc32/${os_abbrev}/i386"
	createrepo "/root/el-build-workarea/glibc32/${os_abbrev}/i386"
	os_repo_for_helper=$( echo "${os_repo_for_koji}" | \
	    sed -e 's/$arch/x86_64/g' )
	generate-glibc32-koji-helper \
	    "${os_repo_for_helper}" \
	    "/root/el-build-workarea/glibc32/${os_abbrev}/x86_64"

	# import the repo into koji
	koji \
	    add-external-repo \
	    "${os_abbrev}-glibc32" \
	    "file:///root/el-build-workarea/glibc32/${os_abbrev}/\$arch/"

	# TODO: instead of using the glibc32 repo for all builds against this
	#       target, create a new target with a -glibc32 suffix, and use that
	#       against a whitelist of packages (grub, ??)
	koji \
	    add-external-repo \
	    "${os_abbrev}-glibc32" \
	    -t "${os_abbrev}-build"

	koji \
	    regen-repo \
	    "${os_abbrev}-build"
    done

    # SHOWSTOPPER, this repo needs to get generated from the new gen-tdv-srpm-repo script, 
    # and the list with the reverse builddate sorting

    if [ "${test_package_list}" != "" ]; then
	srpm_list="${test_package_list}"
    else
        srpm_list=$( lftp -e "cd cache ; cd build.ascendos.org/linux/ascendos/SRPMS ; ls ; quit" http://10.0.2.2:8421/ 2>&1 | awk '{print $5}' | grep "\.src\.rpm$" | sort --sort=version )
    fi

    echo "${srpm_list}" > "${outroot}/logs/koji_tobuild_srpm_list.txt"

    pkg_list=""
    for srpm in ${srpm_list}; do

	status "preprocessing package ... ${srpm} ..."

	pkg_nvr=$( basename "${srpm}" .src.rpm )
	pkg_nv=$( echo "${pkg_nvr}" | sed -e 's/-[^-]*$//' )
	pkg_n=$( echo "${pkg_nv}" | sed -e 's/-[^-]*$//' )
        # better to do this with a local copy of the package and rpm query with format
	pkg_list="${pkg_list} ${pkg_n}"

	status koji \
	    add-pkg \
	    --owner=ascendos-team \
	    ascendos-initial-tag \
	    "${pkg_n}"
	koji \
	    add-pkg \
	    --owner=ascendos-team \
	    ascendos-initial-tag \
	    "${pkg_n}"
    done

#
# NOTE:  The build order algorithm here is currently as follows.  It may
#   well have bugs, or otherwise in use of improvements.  Please discuss
#   any suggestions on the ascendos-dev mailinglist.
#
#   1 the full 'superset' of srpms are collected from tuv's well known published
#     sources (see mirrors.kernel.org/...).  They are reverse sorted by package
#     build order, and epochs between major point releases are noted and
#     currently maintained in repochart-tuv-el6.
# TODO: move that epoch data to to defaults/cfg
#
#   2 first, the full set of .0 packages are built.  For each package, it is
#     attempted to be built against sl60, or if specified in to the 
#     6/6.0/configs/build-against-* config files, it will instead be built
#     against one of the other three boostrapping OS'
#
# NOTE: no current 'dogfooding' pass _yet_ of the sources rebuilt again their
#   own first output instead of the original bootstrapping repos.
#
#   3 then updates up to the next epoch are built against that previous output
#          instead of the 4 bootstrap os repos 
# TODO: see if this actually works even for the 'trouble' packages.
#
#   4 then a pointrelease is composed, jump back to 3, repeat ad infinitum
#
#
# BOTTOM LINE: having the logic spelled out in code/script here, makes it much
#   easier to visually compare altering implementational choices/bugs.
#


    pushd  "${outroot}/koji"
    for srpm in ${srpm_list}; do

	xdone=0

	pkg_nvr=$( basename "${srpm}" .src.rpm )
	pkg_nv=$( echo "${pkg_nvr}" | sed -e 's/-[^-]*$//' )
	pkg_n=$( echo "${pkg_nv}" | sed -e 's/-[^-]*$//' )

	# TODO: obviously need to abstract away the hostname/path here 
	# NOTE: ... at the same time that gen-tdv-srpm-repo appears in this script
	if [ "${x_bake_input_srpm_repo}" == "" ]; then
	    x_bake_input_srpm_repo="http://${x_builder_vm_host_ip}:${x_builder_user_httpd_port}/cache/tdv.SRPMS"
	fi
	wget "${x_bake_input_srpm_repo}/${srpm}"

	debug "calculating target bootstrap os"
	target_bs_os="${def_bs_os}"

	check_os_list=$( listreverse "${bs_os_abbrevs}" )
	check_os_list=$( listremove "${def_bs_os}" "${check_os_list}" )

	for bs_os in ${check_os_list}; do
	    
	    debug "checking against configuration set for bootstrap os: ${bs_os} ..."
	    if [ ! -f "${x_devdir}/6/${x_bake_distrover}/configs/build-against-${bs_os}.pkglist" ]; then
		debug "no configuration pkglist for bootstrap os: ${bs_os} was found"
		if $( grep -q "^${pkg_n}" "${x_devdir}/6/${x_bake_distrover}/configs/build-against-${bs_os}.pkglist" ); then
		    debug "match: ${pkg_n} should be built against ${bs_os}"
		    target_bs_os="${bs_os}"
		else
		    debug "nomatch: ${pkg_n} should not be built against ${bs_os}"
		fi
	    fi
	done

	status koji \
	    add-pkg \
	    --owner=ascendos-team \
	    "${target_bs_os}" \
	    "${pkg_n}"
	koji \
	    add-pkg \
	    --owner=ascendos-team \
	    "${target_bs_os}" \
	    "${pkg_n}"
	status "about to try building ${srpm} against ${target_bs_os} ..."
	status build --wait "${target_bs_os}" "${srpm}" 
	if ( koji build --wait "${target_bs_os}" "${srpm}" 2>&1 | tee -a "${outroot}/logs/${srpm}.kojibuild.log" ); then
#		rm -f "${srpm}"
	    mv "${srpm}" "${srpm}".pre-compile-phase
	    pkg_nvr=$( basename "${srpm}" .src.rpm )
	    koji download-build "${pkg_nvr}"
	    status "seemed to build ok ..."
	else
	    status "seemed to *NOT* build ok ..."
	fi

    done
    popd
    # end srpm iteration

fi
# end if compile sources bake phase (this comment another refactoring motivator)

# SHOWSTOPPER: iterate over input packages and use el-push to arrange into
#       an output structure suitable for pungi here below (instead of 
#       its current use of published builds) (note, need a devtest nosign opt for el-push)

if ( listin "installer-traditional-x64" "${do_bake_phases}" ); then

    ## run pungi non-mock for x86_64 (TODO: may as well run it under mock for consistency)

    # TODO: see if there is a better pungi kickstart to start from in the spin-kickstarts
    #       package, versus the one currently being based on from the pungi package itself.

    # TODO: share pungi arch kickstarts with %include and ksflatten 

    # TODO: start with abstracting bugurl away, then do the rest
    
    pungi \
	--cachedir=/root/el-build-workarea/cache \
	--destdir=/root/el-build-workarea/output \
	--name="${x_bake_distroname}" \
	--ver=${x_bake_distrover} \
	--bugurl=http://bugzilla.ascendos.org \
	--fulltree \
	--selfhosting \
	--nosplitmedia \
	--config="${x_devdir}/${x_bake_traditional_x64_installer_ks_config}"
    # TODO: need to check of _ks_config(s) are a full path instead of assuming relative to devdir
    
fi

if ( listin "installer-traditional-x32" "${do_bake_phases}" ); then

    mockroot=/var/lib/mock/mock-for-pungi-el6-i386/root

    adduser xmock
    usermod -a -G mock xmock

    # deploy specific mock configuration for pungi-i386 runs
    # todo: make defaults/configurable
    cp "${x_devdir}/6/${x_bake_distrover}/configs/mock-for-pungi-el6-i386.cfg" \
	/etc/mock/mock-for-pungi-el6-i386.cfg
    
    # initialize the mock buildroot
    su - xmock -c \
	"mock -r mock-for-pungi-el6-i386 --init"

    # always useful
    su - xmock -c \
	"mock -r mock-for-pungi-el6-i386 --no-clean --install wget"
    
    # needed by pungi
    su - xmock -c \
	"mock -r mock-for-pungi-el6-i386 --no-clean --install anaconda-runtime"

    mkdir -p "${mockroot}/root"
    mkdir -p "${mockroot}/root/el-build-workarea"
    mkdir -p "${mockroot}/root/el-build-workarea/cache"

    # potential runtime enhancements to be explored:
    #  - use non-usermode qemu/kvm networking if available,
    #   - or xfer the cache once as a tar file image attached as disk.
    #  - using any available free lvm space for disks instead of qemu-img ones.
    #   - i.e. el-build can-use /dev/sdb (vg_elbuild would be automatically used if avail)
    # (ortho: and a 'el-build set-workarea' to auto move ~/.el-build 
    #         e.g. under a dift mountpoint)
    mount --bind \
	/root/el-build-workarea/cache \
	"${mockroot}/root/el-build-workarea/cache"

    mkdir -p "${mockroot}/root/el-build-workarea/output"

    cp -av /rpmbuild/RPMS/noarch/python-kid-0.9.6-6.el6.noarch.rpm \
	"${mockroot}/root/"
    su - xmock \
	-c "mock -r mock-for-pungi-el6-i386 --no-clean --shell '\
rpm -Uvh /root/python-kid-\*.rpm'"

    cp -av /rpmbuild/RPMS/noarch/repoview-0.6.5-1.el6.noarch.rpm \
	"${mockroot}/root/"
    su - xmock \
	-c "mock -r mock-for-pungi-el6-i386 --no-clean --shell '\
rpm -Uvh /root/repoview-\*.rpm'"

    cp -av /rpmbuild/RPMS/noarch/pungi-2.0.21-1.el6.noarch.rpm \
	"${mockroot}/root/"
    su - xmock \
	-c "mock -r mock-for-pungi-el6-i386 --no-clean --shell '\
rpm -Uvh /root/pungi-\*.rpm'"
    
    # note sure about what works for multilinebreaking here, too tired to care
    su - xmock \
	-c "mock -r mock-for-pungi-el6-i386 --verbose --no-clean --chroot '\
pungi \
  --cachedir=/root/el-build-workarea/cache \
  --destdir=/root/el-build-workarea/output \
  --name=${x_bake_distroname} \
  --ver=${x_bake_distrover} \
  --bugurl=${x_bake_bug_url} \
  --fulltree \
  --selfhosting \
  --nosplitmedia \
  --config=${x_devdir}/${x_bake_traditional_x32_installer_ks_config}'"
    
    # undo the bind mount
    umount "${mockroot}/root/el-build-workarea/cache"

fi


## install rebootless installation goodness
if ((! "${x_enable_rebootless_liveos_installer_installation}")); then
    # TODO: for future native mode especially, choose a different tmpdir
    touch /tmp/live.rebootless.append.ks
else
    cat <<EOF > /tmp/live.rebootless.append.ks

%post --nochroot
cp /rpmbuild/RPMS/noarch/zyx-liveinstaller-0.2.8-1.el6.noarch.rpm \$INSTALL_ROOT/tmp/zyx-liveinstaller-0.2.8-1.el6.noarch.rpm
# todo: perhaps yum localinstall is better
/usr/sbin/chroot \$INSTALL_ROOT rpm -Uvh /tmp/zyx-liveinstaller-0.2.8-1.el6.noarch.rpm
rm -f \$INSTALL_ROOT/tmp/zyx-liveinstaller-0.2.8-1.el6.noarch.rpm
echo "${x_bake_distroname} Alpha RuleZ" > \$INSTALL_ROOT/etc/zyx-liveinstaller.install.txt
%end

EOF
fi

if ((! "${x_enable_devtree_inclusion_in_live_output}")); then
    touch /tmp/live.devtree.append.ks
else
    cat <<EOF > /tmp/live.devtree.append.ks

%post --nochroot
tar -C \$INSTALL_ROOT/root -xvf "${outroot}/workarea/devtree.tar.bz2"
%end

EOF
fi

if ( listin "installer-live-x32" "${do_bake_phases}" ); then
    
    # prepare/preprocess(ed) livecd-creator configuration
    cat \
	"${x_devdir}/${x_bake_livecd_x32_installer_ks_config}" \
	/tmp/live.devtree.append.ks \
	/tmp/live.rebootless.append.ks \
	> ./livecd-desktop-i386.ks

    livecd-creator \
	--verbose \
	--cache=/root/el-build-workarea/cache \
	--tmpdir=/root/el-build-workarea/tmp \
	--logfile=/root/el-build-workarea/livecd-desktop-x32.log \
	--fslabel="${x_bake_live_label}" \
	--config=livecd-desktop-i386.ks \
	2>&1 | tee -a "${outroot}/logs/livecd-desktop-x32.console.log"

    mkdir -p "${x32outroot}/${x_bake_distrover}/i386/iso"
    mv "${x_bake_live_label}.iso" \
	"${x32outroot}/${x_bake_distrover}/i386/iso/${x_bake_distroname}-${x_bake_distrover}-i386-LiveCD-Desktop.iso"
    mv /root/el-build-workarea/livecd-desktop-x32.log \
	"${outroot}/logs/"
    mv /root/el-build-workarea/livecd-desktop-i386.ks \
	"${outroot}/logs/"

fi
    
if ( listin "installer-live-x64" "${do_bake_phases}" ); then

    # prepare/preprocess(ed) livecd-creator configuration
    cat \
	"${x_devdir}/${x_bake_livecd_x64_installer_ks_config}" \
	/tmp/live.devtree.append.ks \
	/tmp/live.rebootless.append.ks \
	> ./livecd-desktop-x86_64.ks

    livecd-creator \
	--verbose \
	--cache=/root/el-build-workarea/cache \
	--tmpdir=/root/el-build-workarea/tmp \
	--logfile=/root/el-build-workarea/livecd-desktop-x64.log \
	--fslabel="${x_bake_live_label}" \
	--config=livecd-desktop-x86_64.ks \
	2>&1 | tee -a "${outroot}/logs/livecd-desktop-x64.console.log"

    mkdir -p "${x64outroot}/${x_bake_distrover}/x86_64/iso"
    mv "${x_bake_live_label}.iso" \
	"${x64outroot}/${x_bake_distrover}/x86_64/iso/${x_bake_distroname}-${x_bake_distrover}-x86_64-LiveCD-Desktop.iso"
    mv /root/el-build-workarea/livecd-desktop-x64.log \
	"${outroot}/logs/"
    mv /root/el-build-workarea/livecd-desktop-x86_64.ks \
	"${outroot}/logs/"

fi

popd

# .composeinfo
mv "${x64outroot}/${x_bake_distrover}/.composeinfo" \
    "${outroot}/${x_bake_distrover}/.composeinfo.x86_64"
mv "${x32outroot}/${x_bake_distrover}/.composeinfo" \
    "${outroot}/${x_bake_distrover}/.composeinfo.i386"

# logs
mkdir "${outroot}/logs"
mv "${x64outroot}/logs/"* \
    "${outroot}/logs/"
mv "${x32outroot}/logs/"* \
    "${outroot}/logs/"
mv "${x64outroot}/deleted.x86_64.SRPMS.txt" \
    "${outroot}/logs/"
mv /root/anaconda-ks.cfg \
    "${outroot}/logs/build-host.anaconda-ks.cfg"
mv /root/install.log \
    "${outroot}/logs/build-host.install.log"
mv /root/install.log.syslog \
    "${outroot}/logs/build-host.install.log.syslog"
cp /root/x-run.log \
    "${outroot}/logs/x-run.partial.log"

# work
mkdir "${outroot}/work"
mv "${x64outroot}/work/"* \
    "${outroot}/work/"
mv "${x32outroot}/work/"* \
    "${outroot}/work/"

#
# main output arangement
#
# SHOWSTOPPER: need pluggable modules here to provide one or more user specifyable
#                   final output arrangements (using hardlinks)

# main stuffs
mv "${x64outroot}/${x_bake_distrover}/x86_64" \
    "${outroot}/${x_bake_distrover}/"
mv "${x32outroot}/${x_bake_distrover}/i386" \
    "${outroot}/${x_bake_distrover}/"

## sources
mv "${x32outroot}/${x_bake_distrover}/source" \
    "${outroot}/${x_bake_distrover}/"

# carefully merge x32 and x64 sources
for srpm in $( ls -1A "${x64outroot}/${x_bake_distrover}/source/SRPMS/*.src.rpm" ); do
    srpm_base=$( basename "${srpm}" )
    if [ -f "{outroot}/${x_bake_distrover}/source/SRPMS/${srpm_base}" ]; then
	status "x32 already has x64 src.rpm of the same name: ${srpm}"
	if ( ! diff -q "${srpm}" "${x32outroot}/${x_bake_distrover}/source/SRPMS/${srpm_base}" ); then
	    status "assertion failed: about to ls -l the two files"
	    status ls -l "${srpm}" "${x32outroot}/${x_bake_distrover}/source/SRPMS/${srpm_base}"
	    ls -l "${srpm}" "${x32outroot}/${x_bake_distrover}/source/SRPMS/${srpm_base}"
	    die "danger danger: differing x32 and x64 srpms with the same name: ${srpm}"
	fi
    else
	status "copying x64 only src.rpm into place: ${srpm}"
	cp "${srpm}" "${outroot}/${x_bake_distrover}/source/SRPMS/"
    fi
done


# bug workaround (TODO a bit cleaner after the first test)
cp /root/anaconda*.src.rpm \
    "${outroot}/${x_bake_distrover}/source/SRPMS/"


# prepare output for the external user
if [ -f /tmp/disk-sdb-is-going-to-get-overwritten ]; then
    cd "${outroot}"
    tar -cvf /dev/sdb . 
fi

# done

#############################################################################
## end script - only notes below
#############################################################################
#
#



