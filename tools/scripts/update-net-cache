#!/usr/bin/env bash
#
#############################################################################
#############################################################################
#
# update-net-cache: fetch needed build (open)sources from the internets
#
#############################################################################
#
# Copyright 2007-2011 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
# This file is part of X.
#
#    X is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    X is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with X.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################
# note: if you'd like a different license, just let me know which and why
#############################################################################


#############################################################################
#############################################################################
##
## update-net-cache
##
##
## DESCRIPTION
##
## fetch needed build (open)sources from the internets 
##
#############################################################################


#############################################################################
#############################################################################
##
## local constant definitions
##

# for common script library- libx.sh
x_toolname="el-build"
x_prefix=/usr


#############################################################################
#############################################################################
##
## load system library
##

if [ -f "$( dirname $( readlink -e $0 ) )/../../tools/scripts/libx.sh" ]; then
    source "$( dirname $( readlink -e $0 ) )/../../tools/scripts/libx.sh"
elif [ -f "${x_prefix}/lib/${x_toolname}/scripts/libx.sh" ]; then 
    source "${x_prefix}/lib/${x_toolname}/scripts/libx.sh" 
else
    echo "$0: error: fatal: could not load ${x_toolname} system library libx.sh"
    exit 1
fi


#############################################################################
#############################################################################
##
## constant and option default definitions
##

# to enable debug messages if desired
x_debug=0

# to suppress status messages if desired
x_quiet=0


#############################################################################
#############################################################################
##
## functions
##
function usage {
    echo ""
    echo "usage:"
    echo ""
    echo "${progname} \\"
    echo "    <net-cache-dir>  e.g. ~/.el-build/cache"
    echo ""
    echo ""
    exit 1
}


#############################################################################
#############################################################################
##
## main
##

status "initializing..."

cachedir=$( readlink -f "${1}" )

if [ ! -d "${cachedir}" ]; then
    die "cache directory ${cachedir} does not exist"
fi

#############################################################################
# fetch remote directories so as to use a local mirror, possibly offline
for mirror_dir in ${x_mirror_dirs}; do
    status "updating mirror: ${mirror_dir}"

    # todo: could share with code in bake that uses same regex
    #       for the same purpose
    mirror_dir_xmog=$( \
	echo "${mirror_dir}" \
	| sed -e 's/\:\/\//\//' )
    showvar mirror_dir_xmog
    
    mirror_dir_xmog_parent=$( dirname "${mirror_dir_xmog}" )
    mirror_dir_xmog_child=$( basename "${mirror_dir_xmog}" )
    mirror_dest_path="${cachedir}/${mirror_dir_xmog_parent}/${mirror_dir_xmog_child}"
    mkdir -p "${mirror_dest_path}"

    mirror_hostpath=$( echo "${mirror_dir}" | sed -e 's/[^\/]*\/\///' )
    mirror_urltype=$( echo "${mirror_dir}" | sed -e 's/:\/\/.*//' )
    mirror_host=$( echo "${mirror_hostpath}" | sed -e 's/\/.*//' )
    mirror_path=$( echo "${mirror_hostpath}" | sed -e 's/[^\/]*\///' )
    mirror_path_parent=$( dirname "${mirror_path}" )
    mirror_path_child=$( basename "${mirror_path}" )

    # record a begin flag
    date >> "${cachedir}/${mirror_dir_xmog}.last_update_start"

    # do the actual mirroring
    # todo: need x_rap/veva/eval wrapper to only show output to 
    #       console in verbose and debug modes
    lftp -e "\
cd /${mirror_path_parent} ; \
mirror \
--parallel=2 \
--use-cache \
--ignore-time \
--continue \
--delete \
${mirror_path_child} \
${mirror_dest_path} \
; \
quit" \
	"${mirror_urltype}://${mirror_host}"
    
    # record an end flag
    date >> "${cachedir}/${mirror_dir_xmog}.last_update_end"

    # record that the net directory is in the cache's mirror.list
    touch "${cachedir}/mirror.list"
    mv "${cachedir}/mirror.list" "${cachedir}/mirror.list.backup" 
    ( echo "${mirror_dir}" ; cat "${cachedir}/mirror.list.backup" ) \
	| sort \
	| uniq \
	> "${cachedir}/mirror.list"

done


#############################################################################
# fetch one off files

mkdir -p "${cachedir}/one-off-files"

# really one-off
if [ -f "$( get_cached_path ${cachedir} ${x_asc_koji_dump_file} )" ]; then
    if (("${x_refetch_external_koji_metadata}")); then
        # add the extra koji metadata file for use by repochart/bs-check
	x_mirror_files="\
${x_mirror_files}
${x_asc_koji_dump_file}
"
    fi
fi

# fetch each mirror_file
for mirror_file in ${x_mirror_files}; do
    status "caching file: ${mirror_file}"

    # break the url up into fields to aid in fetching and placement
    mirror_hostpath=$( echo "${mirror_file}" | sed -e 's/[^\/]*\/\///' )
    mirror_path=$( echo "${mirror_hostpath}" | sed -e 's/[^\/]*\///' )
    mirror_path_child=$( basename "${mirror_path}" )
    
    # for now, just clobber
    # TODO: have finer grained actual caching behavior
    rm -f "${cachedir}/one-off-files/${mirror_path_child}"
    wget -q -O "${cachedir}/one-off-files/${mirror_path_child}" \
	"${mirror_file}"
    date >> "${cachedir}/one-off-files/${mirror_path_child}.last_update_end"

done


#############################################################################
## end script - only notes below
#############################################################################
#
#  catalog: do by default at end of v-bake, place in output
#  grep "\"GET \/\/cache\/"
#  sed -e 's/.*\"GET \/\/cache\///'
#  awk '{print $1}'
#  (unfortunately for now (sans random port usage) -
#  a subsequent parallel bake could interfere with full/complete log gen
#  then for min-u-n-c iterate over that ivoking appropriately rsync/lftp/wget
