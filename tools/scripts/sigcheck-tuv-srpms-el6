#!/usr/bin/env bash
#
#############################################################################
#############################################################################
#
# sigcheck-tuv-srpms-el6 checks the signatures of mirror-tuv-srpms-el6 output
#
#############################################################################
#
# Copyright 2011 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
# This file is part of X.
#
#    X is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    X is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with X.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################
# note: if you'd like a different license, just let me know which and why
#############################################################################


#############################################################################
#############################################################################
##
## sigcheck-tuv-el6-srpms [<outputdir>=~/.el-build/cache]
##
##
## DESCRIPTION
##
## -
##
##
## NOTES
##
## -
##
#############################################################################


## TODO
# - ...
#


#############################################################################
#############################################################################
##
## get runtime environment
##
starttime="$( date +%Y%m%d%H%M%S )"
progname="$( basename $0 )"
progdir=$( ( pushd $( dirname $( readlink -e $0 ) ) > /dev/null 2>&1 ; \
    pwd ; popd > /dev/null 2>&1 ) )
rundir="$( pwd )"
mypid=$$


#############################################################################
#############################################################################
##
## constant and option default definitions
##

# to enable debug messages
debug=1

# to suppress status messages
quiet=0


#############################################################################
#############################################################################
##
## functions
##
function usage {
    echo ""
    echo "usage:"
    echo ""
    echo "${progname} [<mirror output directory>=~/.el-build/cache]"
    echo ""
    echo ""
    exit 1
}


#############################################################################
#
# usage: status <message...>
#
# wrapper for sending status messages to console and log
#
# globals used: quiet, progname, logfiles(not required)
#
function status {
    time="$( date +%Y-%m-%d.%H:%M:%S )"
    if ((! $quiet)); then
	echo "${progname}: ${time}: status: $@"
    fi
    for logfile in $logfiles; do
	echo "${progname}: ${time}: status: $@" >> $logfile
    done
}

#############################################################################
#
# usage: debug <message...>
#
# wrapper for sending debug messages to console and log
#
# globals used: debug, progname, logfiles(not required)
#
function debug {
    time="$( date +%Y-%m-%d.%H:%M:%S )"
    if (($debug)); then
	echo "${progname}: ${time}: debug: $@"
    fi
    for logfile in $logfiles; do
	echo "${progname}: ${time}: debug: $@" >> $logfile
    done
}


#############################################################################
#
# usage: die <message...>
#
# issue last words
#
function die {
    status "$@"
    exit 1
}


#############################################################################
#
# usage: old_school_crypto <string>
#
# probably overkill avoidance of explicit TUV referencing
#
function old_school_crypto {
    echo "$@" | tr 'a-zA-Z' 'n-za-mN-ZA-M'
}


#############################################################################
#############################################################################
##
## main
##

status "initializing..."

tuv_name_lc=$( old_school_crypto "${tuv_name_lc_enc}" )
mirrorx=$( echo "${mirror}" | sed -e "s/tuv/${tuv_name_lc}/g" )

if [ $# -eq 0 ]; then 
    outputdir=$( readlink -e "${HOME}/.el-build/cache" )
elif [ $# -ne 1 ]; then 
    usage
else
    outputdir=$( readlink -e "${1}" )
fi

if ( ! mkdir -p "${outputdir}" ); then
    die "could not create output directory: ${outputdir}"
fi

if [ ! -d "${progdir}/../security" ]; then
    die "not running from devtree, don't know where to look for verification RPM-GPG-KEYs"
fi

# note: security: this is safe enough with standard /tmp permissions
mkdir -p "/tmp/tmp.${progname}.${starttime}.${mypid}"
mkdir -p "/tmp/tmp.${progname}.${starttime}.${mypid}/gnupg"
mkdir -p "/tmp/tmp.${progname}.${starttime}.${mypid}/rpmdb"
GNUPGHOME="/tmp/tmp.${progname}.${starttime}.${mypid}/gnupg" \
    rpm \
    --dbpath "/tmp/tmp.${progname}.${starttime}.${mypid}/rpmdb" \
    --import "${progdir}/../security/keys/RPM-GPG-KEY-redhat"*

num_pkgs_total=$( ls -1A "${outputdir}/ftp.tuv.com___tuv__linux__enterprise/6Superset/en/os/SRPMS/"*.src.rpm | wc -l )
num_checked=0
status "checking source package signatures..."    
for srpm in $( ls -1A "${outputdir}/ftp.tuv.com___tuv__linux__enterprise/6Superset/en/os/SRPMS/"*.src.rpm ); do
    status "checking " $( basename "${srpm}" ) " ... "
    GNUPGHOME="/tmp/tmp.${progname}.${starttime}.${mypid}" \
	rpm --checksig \
	--dbpath "/tmp/tmp.${progname}.${starttime}.${mypid}/rpmdb" \
	"${srpm}" \
	> "/tmp/tmp.${progname}.${starttime}.${mypid}/lastresult"
    if [ $? -ne 0 ]; then
	cat "/tmp/tmp.${progname}.${starttime}.${mypid}/lastresult"
	die "ALERT: package ${srpm} FAILED SECURITY VERIFICATION" 
    fi
    if ( grep -q "NOT OK" "/tmp/tmp.${progname}.${starttime}.${mypid}/lastresult" ); then
	cat "/tmp/tmp.${progname}.${starttime}.${mypid}/lastresult"
	die "ALERT: package ${srpm} FAILED SECURITY VERIFICATION"
    fi
    if ( ! grep -q "pgp" "/tmp/tmp.${progname}.${starttime}.${mypid}/lastresult" ); then
	cat "/tmp/tmp.${progname}.${starttime}.${mypid}/lastresult"
	die "ALERT: package ${srpm} FAILED SECURITY VERIFICATION"
    fi
    if ( ! grep -q "sha1" "/tmp/tmp.${progname}.${starttime}.${mypid}/lastresult" ); then
	cat "/tmp/tmp.${progname}.${starttime}.${mypid}/lastresult"
	die "ALERT: package ${srpm} FAILED SECURITY VERIFICATION"
    fi
    if ( ! grep -q "rsa" "/tmp/tmp.${progname}.${starttime}.${mypid}/lastresult" ); then
	cat "/tmp/tmp.${progname}.${starttime}.${mypid}/lastresult"
	die "ALERT: package ${srpm} FAILED SECURITY VERIFICATION"
    fi
    num_checked=$(( ${num_checked} + 1 ))
    status "all packages verified thus far are good (${num_checked}/${num_pkgs_total}) ..."
    rm -f "/tmp/tmp.${progname}.${starttime}.${mypid}/lastresult"
    # man rpm says dsa is preferred over rsa, but not in use here because?(fixme/comment?)
    #if ( ! grep -q "dsa" "/tmp/tmp.${progname}.${starttime}.${mypid}/lastresult" ); then
    #	die "ALERT: package ${srpm} FAILED SECURITY VERIFICATION"
    #fi	
done