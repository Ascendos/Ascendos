#!/usr/bin/env bash
#
#############################################################################
#############################################################################
#
# src-pkg-repo-diff 
#
# generates a set of abbreviated comparisons of two related source package
# (src.rpm) repositories.
#
#############################################################################
#
# Copyright 2011 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
# This file is part of X.
#
#    X is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    X is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with X.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################
# note: if you'd like a different license, just let me know which and why
#############################################################################


#############################################################################
#############################################################################
##
## ...
##
##
## DESCRIPTION
##
## ...
##
##
## NOTES
##
## - input_left and _right must both be specified if at all
##
#############################################################################

## TODO
# - ...
#  - all very hardcoded for initial asc workflow, improve flexibility/utility
#  - definitely should support diffing sl6/etc... as well against tuv, for
#    sanity comparison and reference value


#############################################################################
#############################################################################
##
## local constant definitions
##

# for common script library- libx.sh
x_toolname="el-build"
x_prefix=/usr


#############################################################################
#############################################################################
##
## load system library
##

if [ -f "$( dirname $( readlink -e $0 ) )/../../tools/scripts/libx.sh" ]; then
    source "$( dirname $( readlink -e $0 ) )/../../tools/scripts/libx.sh"
elif [ -f "${x_prefix}/lib/${x_toolname}/scripts/libx.sh" ]; then 
    source "${x_prefix}/lib/${x_toolname}/scripts/libx.sh" 
else
    echo "$0: error: fatal: could not load ${x_toolname} system library libx.sh"
    exit 1
fi


#############################################################################
#############################################################################
##
## constant and option default definitions
##

# to enable debug messages if desired
x_debug=0

# to suppress status messages if desired
x_quiet=0


#############################################################################
#############################################################################
##
## functions
##
function usage {
    echo ""
    echo "usage:"
    echo ""
    echo "${progname} ... (TODO/FIXME)"
    echo ""
    echo ""
    exit 1
}


#############################################################################
#############################################################################
##
## main
##

status "initializing..."



#############################################################################
### retrieve arguments/options

if [ $# -eq 0 ]; then 
    # note: somewhat confusing, this order doesn't match arg order, but is to abbreviate code
    input_left=$( readlink -e "${HOME}/.el-build/cache/ftp/ftp.tuv.com/tuv/linux/enterprise/6Superset/en/os/SRPMS" )
    input_right=$( readlink -e "${HOME}/.el-build/cache/build.ascendos.org/linux/ascendos/SRPMS" )
    output_dir="${input_right}.repo-diff-against-tuv"
    min_srpm_list="${input_right}.repo-diff-against-tuv.srpm-list"
elif [ $# -eq 1 ]; then 
    output_dir=$( readlink -f "${1}" )
    input_left=$( readlink -e "${HOME}/.el-build/cache/ftp/ftp.tuv.com/tuv/linux/enterprise/6Superset/en/os/SRPMS" )
    input_right=$( readlink -e "${HOME}/.el-build/cache/build.ascendos.org/linux/ascendos/SRPMS" )
    min_srpm_list="${input_right}.repo-diff-against-tuv.srpm-list"
elif [ $# -eq 2 ]; then 
    output_dir=$( readlink -f "${1}" )
    min_srpm_list=$( readlink -f "${2}" )
elif [ $# -eq 3 ]; then 
    # I don't see a particularly useful way to do something intuitive here
    usage
elif [ $# -eq 4 ]; then 
    output_dir=$( readlink -f "${1}" )
    min_srpm_list=$( readlink -f "${2}" )
    input_left=$( readlink -e "${3}" )
    input_right=$( readlink -e "${4}" )
else
    usage
fi


#############################################################################
### validate args
if [ -d "${output_dir}" ]; then
    die "output dir ${output_dir} already exists"
fi

if [ ! -f "${min_srpm_list}" ]; then
    die "min srpm list ${min_srpm_list} does not exist"
fi

if [ ! -d "${input_left}" ]; then
    die "input_left directory ${input_left} does not exist"
fi

if [ ! -d "${input_right}" ]; then
    die "input_right directory ${input_right} does not exist"
fi



#############################################################################
### tmpdir
tmpdir="/tmp/tmp.${progname}.xyz.${starttime}.$$"
mkdir -p "${tmpdir}"


#############################################################################
### retrieve list of modified source packages

pkg_list_to_diff=$( < "${min_srpm_list}" )

for pkg in ${pkg_list_to_diff}; do
    status "processing ${pkg} ..."

    # calculate left side name if it were to exist
    # the .el6.0 and .asc6 parts are presumed to have predated the
    # the wiki/PackageNaming protocol or otherwise manual oversights.
    # please add any other theory here in these comments.
    target_pkg_name=$( echo "${pkg}" \
	| sed \
	-e 's/\.src\.rpm$//' \
	-e 's/\.asc\.[0-9]\+$//' \
	-e 's/\.asc$//' \
	-e 's/\.el6\.0$/\.el6/' \
	-e 's/[0-9]\+\.asc6$/1\.el6/' \
	-e 's/\.el6$//' )
    target_pkg_srpm_filename="${target_pkg_name}.el6.src.rpm"

    if [ ! -f "${input_left}/${target_pkg_srpm_filename}" ]; then
	# no tuv analog, so just expand
	mkdir -p "${output_dir}/${target_pkg_name}"
	pushd "${output_dir}/${target_pkg_name}" > /dev/null 2>&1 
	# anecdotally it seems srpms are thus far directoryless 
	# as far as this is concerned, but just to make it visible
	# if ever not, harmless --make-directories
	rpm2cpio "${input_right}/${pkg}" \
	    | cpio --quiet --extract --make-directories

	for file in $( find . -type f -print ); do
	    expand_file=0
	    if ( echo "${file}" | grep -q "\.tar\.bz2\$" ); then
		expand_file=1
	    elif  ( echo "${file}" | grep -q "\.tar\.gz\$" ); then
		expand_file=1
	    elif  ( echo "${file}" | grep -q "\.tar\$" ); then
		expand_file=1
	    fi
	    if ((${expand_file})); then
		mkdir "${file}.elbuild_expanded"
		pushd "${file}.elbuild_expanded" > /dev/null 2>&1 
		tar xpsf "../${file}"
		popd > /dev/null 2>&1 
		rm -f "${file}"
	    fi
	done

	popd > /dev/null 2>&1
    else
	# expand tuv analog 
	# save sha256 sums for transient but permanent posterity
	mkdir -p "${output_dir}/${target_pkg_name}.tuv"
	debug "saving sha256sum for tuv package: ${target_pkg_name} ..."
	sha256sum "${input_left}/${target_pkg_srpm_filename}" \
	    >> "${output_dir}/.tuv.src.rpm.sha256sums"
	# new header for the ongoing internal sha256sums file
	echo -en "\n\n--- BEGIN ${target_pkg_name} ---\n\n" \
	    >> "${output_dir}/.tuv.src.rpm.internal.sha256sums"
	pushd "${output_dir}/${target_pkg_name}.tuv" > /dev/null 2>&1
	rpm2cpio "${input_left}/${target_pkg_srpm_filename}" \
	    | cpio --quiet --extract --make-directories
	# save sha256 sums for transient but permanent posterity
	find . \
	    -type f \
	    -print \
	    -exec sha256sum '{}' ';' \
	    >> "${output_dir}/.tuv.src.rpm.internal.sha256sums" 
	popd > /dev/null 2>&1
	echo -en "\n\n--- END ${target_pkg_name} ---\n\n" \
	    >> "${output_dir}/.tuv.src.rpm.internal.sha256sums" 

	# expand downstream version
	mkdir -p "${output_dir}/${target_pkg_name}.tdv"
	debug "saving sha256sum for tdv package: ${target_pkg_name} ..."
	sha256sum "${input_right}/${pkg}" \
	    >> "${output_dir}/.tdv.src.rpm.sha256sums"
	# new header for the ongoing internal sha256sums file
	echo -en "\n\n--- BEGIN ${target_pkg_name} ---\n\n" \
	    >> "${output_dir}/.tdv.src.rpm.internal.sha256sums"
	pushd "${output_dir}/${target_pkg_name}.tdv" > /dev/null 2>&1
	rpm2cpio "${input_right}/${pkg}" \
	    | cpio --quiet --extract --make-directories
	# save sha256 sums for transient but permanent posterity
	find . \
	    -type f \
	    -print \
	    -exec sha256sum '{}' ';' \
	    >> "${output_dir}/.tdv.src.rpm.internal.sha256sums" 
	popd > /dev/null 2>&1
	echo -en "\n\n--- END ${target_pkg_name} ---\n\n" \
	    >> "${output_dir}/.tdv.src.rpm.internal.sha256sums" 

	# also use as initial data for the diff
	mkdir -p "${output_dir}/${target_pkg_name}"
	pushd "${output_dir}/${target_pkg_name}" > /dev/null 2>&1
	rpm2cpio "${input_right}/${pkg}" \
	    | cpio --quiet --extract --make-directories
	popd > /dev/null 2>&1


	# make abbreviated diff output for inspection
	diff -r \
	    "${output_dir}/${target_pkg_name}.tuv" \
	    "${output_dir}/${target_pkg_name}.tdv" \
	    > "${output_dir}/.${target_pkg_name}.diff-tuv-tdv.txt" 2>&1

	# for each tdv file, check if identical in tuv, and if so remove from diff output
	pushd "${output_dir}/${target_pkg_name}.tdv" > /dev/null 2>&1 
	for file in $( find . -type f -print ); do
	    if ( diff -q "${output_dir}/${target_pkg_name}.tuv/${file}" \
		"${output_dir}/${target_pkg_name}.tdv/${file}" > /dev/null 2>&1 ); then
		rm -f "${output_dir}/${target_pkg_name}/${file}"
	    fi
	done
	popd > /dev/null 2>&1
	
	# for each tuv file, check if not present in tdv, and if so, create .elbuild_not_used flagfile
	pushd "${output_dir}/${target_pkg_name}.tuv" > /dev/null 2>&1
	for file in $( find . -type f -print ); do
	    if [ ! -f "${output_dir}/${target_pkg_name}.tdv/${file}" ]; then
		touch "${output_dir}/${target_pkg_name}/${file}.elbuild_not_used"
	    fi
	done
	popd > /dev/null 2>&1

	# for each diff file, check if present in tuv, and if a spec file, create a patch
	# note, alternately if not a .spec, this used to create a .elbuild_patchable flagfile,
	# but the initial asc import didn't have anything worth noting in that category.
	pushd "${output_dir}/${target_pkg_name}" > /dev/null 2>&1
	for file in $( find . -type f -print ); do
	    if [ -f "${output_dir}/${target_pkg_name}.tuv/${file}" ]; then
		# special assumption is to create patches with specfiles
		# TODO: should remove any preexisting .asc* from release, and 
		#       have that dynamically autoadded suring tdv srpm generation
		#       from deltas.  But for first import, slightly better anyway
		#       to generate out to same src.rpm filename that was imported
		if ( echo "${file}" | grep -q "\.spec\$" ); then
		    LC_ALL=C TZ=UTC0 diff -Naur \
			"${output_dir}/${target_pkg_name}.tuv/${file}" \
			"${output_dir}/${target_pkg_name}.tdv/${file}" \
			> "${output_dir}/${target_pkg_name}/${file}.elbuild.patch" 
		    rm -f "${output_dir}/${target_pkg_name}/${file}" 
		fi
	    fi
	done
	popd > /dev/null 2>&1

	# for each diff file if .tar .tar.gz or .tar.bz, replace with a -expanded
	pushd "${output_dir}/${target_pkg_name}" > /dev/null 2>&1
	for file in $( find . -type f -print ); do
	    expand_file=0
	    if ( echo "${file}" | grep -q "\.tar\.bz2\$" ); then
		expand_file=1
	    elif  ( echo "${file}" | grep -q "\.tar\.gz\$" ); then
		expand_file=1
	    elif  ( echo "${file}" | grep -q "\.tar\$" ); then
		expand_file=1
	    fi
	    if ((${expand_file})); then
		mkdir "${file}.elbuild_expanded"
		pushd "${file}.elbuild_expanded" > /dev/null 2>&1 
		tar xpsf "../${file}"
		popd > /dev/null 2>&1 
		rm -f "${file}"
	    fi
	done
	popd > /dev/null 2>&1

	# sanity check, make .tdv-rebuild version, and diff with .tdv should be clean
	# also use as initial data for the diff
	mkdir -p "${output_dir}/${target_pkg_name}.tdv.rebuild"
	pushd "${output_dir}/${target_pkg_name}.tdv.rebuild" > /dev/null 2>&1
	# extract *TUV* original package
	rpm2cpio "${input_left}/${target_pkg_srpm_filename}" \
	    | cpio --quiet --extract --make-directories
	popd > /dev/null 2>&1


	# now integrate changes from delta directory
	pushd "${output_dir}/${target_pkg_name}" > /dev/null 2>&1

	# first pass for special tarball-expanded direcories
	for dir in $( find . -type d -print ); do
	    if ( echo "${dir}" | grep -q "\.elbuild_expanded\$" ); then
		target_dir_file=$( echo "${dir}" | sed -e 's/\.elbuild_expanded$//' )
		pushd "${dir}" > /dev/null 2>&1
		if ( echo "${target_dir_file}" | grep -q "\.tar\.gz\$" ); then
		    tar -czpsf "${output_dir}/${target_pkg_name}.tdv.rebuild/${target_dir_file}" .
		elif ( echo "${target_dir_file}" | grep -q "\.tar\.bz2\$" ); then
		    tar -cjpsf "${output_dir}/${target_pkg_name}.tdv.rebuild/${target_dir_file}" .
		elif ( echo "${target_dir_file}" | grep -q "\.tar$" ); then
		    tar -cpsf "${output_dir}/${target_pkg_name}.tdv.rebuild/${target_dir_file}" .
		fi
		popd > /dev/null 2>&1
	    fi
	done

	# second pass for everything else 
	for file in $( find . -type f -print ); do
	    if ( echo "${file}" | grep -q "\.elbuild_patchable\$" ); then
		# disregard for now
		true
	    elif ( echo "${file}" | grep -q "\.elbuild_expanded\/" ); then
		# disregard, taken care of above
		true
	    elif ( echo "${file}" | grep -q "\.elbuild\.patch\$" ); then
		target_file=$( echo "${file}" | sed -e 's/\.elbuild\.patch$//' )
		patch --quiet "${output_dir}/${target_pkg_name}.tdv.rebuild/${target_file}" \
		    "${output_dir}/${target_pkg_name}/${file}" 
	    elif ( echo "${file}" | grep -q "\.elbuild_not_used\$" ); then
		# this file isn't used by tdv, so remove from rebuild 
		killfile=$( echo "${file}" | sed -e 's/\.elbuild_not_used$//' )
		rm -f "${output_dir}/${target_pkg_name}.tdv.rebuild/${killfile}"
	    else
		# diff file takes priority, copy over tuv version if present
		cp "${file}" "${output_dir}/${target_pkg_name}.tdv.rebuild/${file}"
	    fi
	done

	popd > /dev/null 2>&1

	# check the results
	if ( ! diff -q -r \
	    --exclude="*.tar.gz" \
	    --exclude="*.tar.bz2" \
	    --exclude="*.tar.gz" \
	    --exclude="*.tar" \
	    "${output_dir}/${target_pkg_name}.tdv" \
	    "${output_dir}/${target_pkg_name}.tdv.rebuild" ); then
	    die "FATAL error, failed to rebuild tdv version of ${target_pkg_name} from tuv and diff.  BUG!"
	fi

	# clean up 
	rm -rf "${output_dir}/${target_pkg_name}.tdv.rebuild"
	rm -rf "${output_dir}/${target_pkg_name}.tdv"
	rm -rf "${output_dir}/${target_pkg_name}.tuv"


	# LATER (maybe not needed at all???) if file is a [.tar.gz,...] createa a [.tar.gz-extracted/] dir, and see if diffable patch for that (but hopefully this won't be needed for initial import)
    fi

done

# clean up parent paths
sed -i -e 's/\/.*\///g' \
    "${output_dir}/.tuv.src.rpm.sha256sums"
sed -i -e 's/\/.*\///g' \
    "${output_dir}/.tdv.src.rpm.sha256sums"
    



#############################################################################
### cleanup
rm -rf "${tmpdir}"
debug "goodbye..."

### end script, only notes below...
#############################################################################
#############################################################################
#############################################################################
#
# ...
