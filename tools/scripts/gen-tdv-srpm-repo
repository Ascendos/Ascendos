#!/usr/bin/env bash
#
#############################################################################
#############################################################################
#
# gen-tdv-srpm-repo
#
# generates the downstream vendors srpm repo from a given upstream vendor
# srpm repo and a delta repo
#
#############################################################################
#
# Copyright 2011 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
# This file is part of X.
#
#    X is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    X is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with X.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################
# note: if you'd like a different license, just let me know which and why
#############################################################################


#############################################################################
#############################################################################
##
## gen-tdv-srpm-repo \
##     [<output_tdv_srpm_repo>=${x_cached_generated_srpm_repo}] \
##     [<tdv_delta_repo>=${x_devdir}/packages] \
##     [<tuv_srpm_repo>=${x_bake_cachedir}/ftp/ftp.tuv.com/tuv/linux/enterprise/6Superset/en/os/SRPMS] 
##
##
## DESCRIPTION
##
## ...
##
##
## NOTES
##
##
#############################################################################

## TODO
# - ...
#  - for deltas, need similar 'cached already?' smarts, but even more 
#    logic for setting .asc* dist suffix on the output
#  - may be hardcoded for init asc workflow, improve flexibility/utility
#  - definitely should support diffing sl6/etc... as well against tuv, for
#    sanity comparison and reference value
#  - could support a 'trait script' that is basically a filter against the
#    src.rpm.  I.e. one for httpd(sans version or release), which checks for
#    an index.html, and if it finds it, replaces it.  Sort of a slightly
#    more thoughtful version than assuming one will be in the same spot
#    forever and dropping into place under that assumption.  Perhaps an
#    unamazing example, but I think the flexibility may well be considered
#    useful in addition to the existing patch/overlay method options.


#############################################################################
#############################################################################
##
## local constant definitions
##

# for common script library- libx.sh
x_toolname="el-build"
x_prefix=/usr


#############################################################################
#############################################################################
##
## load system library
##

if [ -f "$( dirname $( readlink -e $0 ) )/../../tools/scripts/libx.sh" ]; then
    source "$( dirname $( readlink -e $0 ) )/../../tools/scripts/libx.sh"
elif [ -f "${x_prefix}/lib/${x_toolname}/scripts/libx.sh" ]; then 
    source "${x_prefix}/lib/${x_toolname}/scripts/libx.sh" 
else
    echo "$0: error: fatal: could not load ${x_toolname} system library libx.sh"
    exit 1
fi


#############################################################################
#############################################################################
##
## constant and option default definitions
##

# to enable debug messages if desired
x_debug=0

# to suppress status messages if desired
x_quiet=0


#############################################################################
#############################################################################
##
## functions
##
function usage {
    echo ""
    echo "usage:"
    echo ""
    echo "${progname} ... (TODO/FIXME)"
    echo ""
    echo ""
    exit 1
}


#############################################################################
#############################################################################
##
## main
##

status "initializing..."


#############################################################################
status "parsing arguments ..."

# just for line length
def_tuv_srpm_repo="\
${x_bake_cachedir}/ftp/ftp.tuv.com/tuv/linux/enterprise/6Superset/en/os/SRPMS"

if [ $# -eq 0 ]; then 
    output_tdv_srpm_repo=$( readlink -f "${x_cached_generated_srpm_repo}" )
    tdv_delta_repo=$( readlink -f "${x_devdir}/packages" )
    tuv_srpm_repo=$( readlink -f "${def_tuv_srpm_repo}" )
elif [ $# -eq 1 ]; then 
    usage
elif [ $# -eq 2 ]; then 
    usage
elif [ $# -eq 3 ]; then 
    output_tdv_srpm_repo=$( readlink -f "${1}" )
    tdv_delta_repo=$( readlink -f "${2}" )
    tuv_srpm_repo=$( readlink -f "${3}" )
else
    usage
fi


#############################################################################
status "validating arguments ..."

if [ -d "${output_tdv_srpm_repo}" ]; then
    mkdir -p "${output_tdv_srpm_repo}" 
fi

if [ ! -d "${tdv_delta_repo}" ]; then
    die "tdv_delta_repo directory ${tdv_delta_repo} does not exist"
fi

if [ ! -d "${tuv_srpm_repo}" ]; then
    die "tuv_srpm_repo directory ${tuv_srpm_repo} does not exist"
fi

#############################################################################
status "initializing tmpdir ..."

tmpdir=$( setup_tmpdir )


#############################################################################
status "initializing isolated rpmdev stuffs ..."

mkdir "${tmpdir}/rpmbuildhome"

env HOME="${tmpdir}/rpmbuildhome" \
    rpmdev-setuptree

cat <<EOF > "${tmpdir}/rpmbuildhome/.rpmmacros"
# dist macros.
%rhel 6
%dist .el6
%el6 1
# el-build
%vendor ${x_bake_distroname}
EOF


#############################################################################
status "re-vending tuv stock source packages ..."

## for each tuv srpm, not in non.in.asc list, rebuild as initial contents
for srpm in $( ls -1A "${tuv_srpm_repo}/"*.src.rpm ); do

    buildit=1
    srpm_filename=$( echo "${srpm}" | sed -e 's/.*\///' )

    status "processing tuv package: ${srpm_filename} ..."

    for blacklisted_pkg_entry in $( < \
	"${x_devdir}/6/6.0/configs/tuv-pkgs-not-in-asc6" ); do

	blacklisted_pkg_name=$( echo "${blacklisted_pkg_entry}" \
	    | sed -e 's/^===//' -e 's/===$//' )

	if [ "${srpm_filename#${blacklisted_pkg_name}}" \
	    != "${srpm_filename}" ]; then
	    buildit=0
	fi
    done

    # check to see if it needs building, or if a good build exists already
    if [ -f "${output_tdv_srpm_repo}/${srpm_filename}" ]; then
	if [ "${output_tdv_srpm_repo}/${srpm_filename}" \
	    -nt "${tuv_srpm_repo}/${srpm_filename}" ]; then
	    status "package ${srpm_filename} has already been built" \
		"more recently than the upstream package, skipping ..."
	    buildit=0
	fi
    fi

    if ((${buildit})); then

	status "re-vending tuv package: ${srpm_filename} ..."

	env HOME="${tmpdir}/rpmbuildhome" \
	    rpm \
	    -i \
	    "${tuv_srpm_repo}/${srpm_filename}" \
	    > "${tmpdir}/${progname}.verbose.log" 2>&1
	
	env HOME="${tmpdir}/rpmbuildhome" \
	    rpmbuild \
	    -bs \
	    --rmspec \
	    --rmsource "${tmpdir}/rpmbuildhome/rpmbuild/SPECS/"*.spec \
	    > "${tmpdir}/${progname}.verbose.log" 2>&1
	
        # reviewer? is anything wrong with this method of preserving upstream
        #   source rpm filenames (i.e. so .el6_1.src.rpm doesn't become
        #   .el6.src.rpm as it would if we accepted the default output 
        #   filename.)
	mv "${tmpdir}/rpmbuildhome/rpmbuild/SRPMS/"*.src.rpm \
	    "${output_tdv_srpm_repo}/${srpm_filename}"
    fi

done
# end iteration of tuv packages


#############################################################################
status "processing downstream package deltas ..."

for target_pkg_name in $(\
    find "${tdv_delta_repo}" \
    -mindepth 1 \
    -maxdepth 1 \
    -type d \
    -print \
    | sed -e 's/.*\///' ); do

    status "processing package with tdv delta: ${target_pkg_name} ..."

    buildit=1
    # check to see if it needs building, or if a good build exists already
    latest_version_built=$( \
	ls -1A "${output_tdv_srpm_repo}/${target_pkg_name}"*asc*.src.rpm \
	2> /dev/null \
	| sort --sort=version \
	| tail -1 )
    if [ -f "${latest_version_built}" ]; then
	updated_deltas=$( \
	    find \
	    "${tdv_delta_repo}/${target_pkg_name}" \
	    -newer "${latest_version_built}" )
	showvar updated_deltas
	
	if [ "${updated_deltas}" == "" ]; then
	    status "modified package ${target_pkg_name} has already been built" \
		"more recently than any new deltas, skipping ..."
	    buildit=0
	fi
    fi

    if (("${buildit}")); then

        # create and enter a rebuilding workarea/directory
	pkg_rebuild_dir="${output_tdv_srpm_repo}/${target_pkg_name}.tdv.rebuild"
	mkdir -p "${pkg_rebuild_dir}"
	pushd "${pkg_rebuild_dir}" > /dev/null 2>&1
	
        # extract *TUV* original package if it exists

	# NOTE: consider more whether or not this sketchy(??) logic
	# (not that bind is modified, but provides a good example)
	# bind-9.7.3-2.el6_1.P3.2.src.rpm has
	# Release:  2%{?dist}.%{PATCHVER}.2 is what is in
	# and I'm pretty sure the dist portion will result in binary
	# packages by default like- bind-9.7.3-2.el6.1.P3.2*
	# (i.e. .el6_1 -> .el6.1 )
	# (todo: check that is how they look from upstream)
	# in other words, need to seriously consider that, and see if it
	#   is indicitave of the idea that the packages/deltas dir should
	#   have the .el6* in it, as there can be multiple, i.e. .el6, .el6_1,
	#   .el6_2, etc... 

	# but for right now, just do this
	last_package_filename=$( \
	    ls -1A "${tuv_srpm_repo}/${target_pkg_name}.el6"*.src.rpm \
	    2> /dev/null )

        if [ -f "${last_package_filename}" ]; then

	    last_package_basename=$( \
		basename "${last_package_filename}" .src.rpm )

	    rpm2cpio "${last_package_filename}" \
		| cpio --quiet --extract --make-directories \
		> "${tmpdir}/${progname}.verbose.log" 2>&1

	else

	    # used below to create the destination filename
	    last_package_basename="${target_pkg_name}.el6"

	fi

	popd > /dev/null 2>&1
	
        # now integrate changes from delta directory
	cp -a "${tdv_delta_repo}/${target_pkg_name}" \
	    "${output_tdv_srpm_repo}/${target_pkg_name}" 
	pushd "${output_tdv_srpm_repo}/${target_pkg_name}" > /dev/null 2>&1

        # first pass for special tarball-expanded direcories
	for dir in $( find . -type d -print ); do
	    if ( echo "${dir}" | grep -q "\.elbuild_expanded\$" ); then
		
		target_dir_file=$( echo "${dir}" \
		    | sed -e 's/\.elbuild_expanded$//' )
		
		pushd "${dir}" > /dev/null 2>&1
		
		rebuilt_file="${pkg_rebuild_dir}/${target_dir_file}"
		
		if ( echo "${target_dir_file}" \
		    | grep -q "\.tar\.gz\$" ); then
		    
		    tar -czpsf "${rebuilt_file}" . 
		    
		elif ( echo "${target_dir_file}" \
		    | grep -q "\.tar\.bz2\$" ); then
		    
		    tar -cjpsf "${rebuilt_file}" . 
		    
		elif ( echo "${target_dir_file}" \
		    | grep -q "\.tar$" ); then
		    
		    tar -cpsf "${rebuilt_file}" . 
		fi
		popd > /dev/null 2>&1
	    fi
	done
    
#############################################################################
        # second pass for everything else 
	for file in $( find . -type f -print ); do
	    if ( echo "${file}" | grep -q "\.elbuild_patchable\$" ); then
		# disregard for now
		true
	    elif ( echo "${file}" | grep -q "\.elbuild_expanded\/" ); then
		# disregard, taken care of above
		true
	    elif ( echo "${file}" | grep -q "\.elbuild\.patch\$" ); then
		target_file=$( echo "${file}" | sed -e 's/\.elbuild\.patch$//' )
		patch --quiet "${pkg_rebuild_dir}/${target_file}" \
		    "${output_tdv_srpm_repo}/${target_pkg_name}/${file}" 
	    elif ( echo "${file}" | grep -q "\.elbuild_not_used\$" ); then
		# this file isn't used by tdv, so remove from rebuild 
		killfile=$( echo "${file}" | sed -e 's/\.elbuild_not_used$//' )
		rm -f "${pkg_rebuild_dir}/${killfile}"
	    else
		# diff file takes priority, copy over tuv version if present
		cp "${file}" "${pkg_rebuild_dir}/${file}"
	    fi
	done
    
	popd > /dev/null 2>&1
	rm -rf "${output_tdv_srpm_repo}/${target_pkg_name}"

	
#############################################################################
        # go about repackaging/vending modified package components

	# sources...
	mv "${pkg_rebuild_dir}/"* \
	    "${tmpdir}/rpmbuildhome/rpmbuild/SOURCES/"
	
	# ... plus spec ...
	mv "${tmpdir}/rpmbuildhome/rpmbuild/SOURCES/"*.spec \
	    "${tmpdir}/rpmbuildhome/rpmbuild/SPECS/"
	
	# ... get processesed into ...
	env HOME="${tmpdir}/rpmbuildhome" \
	    rpmbuild \
	    -bs \
	    --rmspec \
	    --rmsource \
	    "${tmpdir}/rpmbuildhome/rpmbuild/SPECS/"*.spec \
	    > "${tmpdir}/${progname}.verbose.log" 2>&1

	# todo: review this when not tired/intoxicated, will get 
	#   rewritten anyway while tending to above TODOs
	pkg_name=$( \
	    basename \
	    "${tmpdir}/rpmbuildhome/rpmbuild/SRPMS/"*.src.rpm \
	    .src.rpm )
	showvar pkg_name
	num_suffix=$( \
	    echo "${pkg_name}" \
	    | sed -e 's/^.*\(\.[0-9]\+\)$/\1/' )
	showvar num_suffix

	if [ "${num_suffix}" == "${pkg_name}" ]; then
	    num_suffix=""
	fi

	new_srpm_filename="${last_package_basename}.asc${num_suffix}.src.rpm"

	# resulting package that gets staged
	mv -v "${tmpdir}/rpmbuildhome/rpmbuild/SRPMS/"*.src.rpm \
	    "${output_tdv_srpm_repo}/${new_srpm_filename}"

	# clean up the rebuild workarea
	rm -rf "${pkg_rebuild_dir}"
	
    fi
    # end if(buildit)
done
# end iterating over deltas


#############################################################################
status "cleaning out stock versions of modified packages ..."

for pkg in $( ls -1A "${output_tdv_srpm_repo}/"*.src.rpm ); do
    pkg_basename=$( basename "${pkg}" .src.rpm )
    debug "looking for obsoleted versions of ${pkg_basename} ..."
    if ( echo "${pkg_basename}" \
	| sed -e 's/\.[0-9]\+//' \
	| grep -q '\.asc$' ); then
	stockname=$( echo "${pkg_basename}" \
	    | sed -e 's/\.[0-9]\+//' \
	    | sed -e 's/\.asc$//' )
	rm -vf "${output_tdv_srpm_repo}/${stockname}.src.rpm"
    fi
done


#############################################################################
status "generating source package repository metadata ..."

createrepo "${output_tdv_srpm_repo}/"


#############################################################################
status "cleaning up ..."

rm -rf "${tmpdir}"
debug "goodbye..."


### end script, only notes below...
#############################################################################
#############################################################################
#############################################################################
#
# ...



