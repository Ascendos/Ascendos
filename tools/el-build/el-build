#!/usr/bin/env bash
#
#############################################################################
#############################################################################
#
# el-build: an enterprise linux distro building tool 
#
#############################################################################
#
# Copyright 2007-2011 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
# This file is part of X.
#
#    X is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    X is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with X.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################
# note: if you'd like a different license, just let me know which and why
#############################################################################


#############################################################################
#############################################################################
##
## el-build
##
##
## DESCRIPTION
##
## el-build takes as input network or offline access to a bootstrapping
## enterprise linux distro (e.g. SL60/F13) and recently built set of distro
## packages (e.g. from koji), and outputs a new installable distro repotree
## (e.g. ASC60) suitable for mirroring to the masses.
##
##
## LONG TERM ROADMAP
##
## the input pipeline will be expanded to include:
## - generating the 'recently built set of distro packages' from access to
##   the new input of just the .src.rpms for the new distro (i.e. koji)
## - then another addition to the input pipeline of generating those input
##   .src.rpms from just the minimal git tree of deltas between that set of
##   .src.rpms and a pristine set of .src.rpms from the upstream vendor.
##
##
## NOTES
##
## - output reproducibility is ensured by the fact that a disposable VM
##   is generated and used for the major processing phases (e.g. pungi,
##   and later koji).
##
#############################################################################


## TODO
# - factor main into several large independent functions
# - ? add option bootstrap_distro_tree=...sl60x64
# - ...


#############################################################################
#############################################################################
##
## get runtime environment
##
starttime="$( date +%Y%m%d%H%M%S )"
progname="$( basename $0 )"
progdir=$( ( pushd $( dirname $( readlink -e $0 ) ) > /dev/null 2>&1 ; \
    pwd ; popd > /dev/null 2>&1 ) )
rundir="$( pwd )"
mypid=$$


#############################################################################
#############################################################################
##
## constant and option default definitions
##

distroname_def="Ascendos"
distrover_def="6.0"
offline_def="no"
distrorelname_def="nameless"
# presumption is to first check in ./, then devroot/6/distrover/
config_x64_def="pungi-x86_64.ks"
config_x32_def="pungi-i386.ks"
outputdir_def="${rundir}/${progname}-output"
homedotdir_def="${HOME}/.${progname}"
cachedir_def="${homedotdir_def}/cache"
if [ "${TMPDIR}" != "" ]; then
    tmpdir_def="${TMPDIR}"
else
    tmpdir_def="${homedotdir_def}/tmp"
fi
builtrepo_def="http://build.ascendos.org/linux/ascendos/${distrover}"

# a rather internally hardcoded list for the first pass
# TODO: add a method for specifying a mirror to use if desired for any entry
mirror_dirs="\
ftp://ftp.scientificlinux.org/linux/scientific/6x/SRPMS
ftp://ftp.scientificlinux.org/linux/scientific/6.0/x86_64/os
ftp://ftp.scientificlinux.org/linux/scientific/6.0/i386/os
http://build.ascendos.org/linux/ascendos/SRPMS
http://build.ascendos.org/linux/ascendos/6.0
"

# dev/debug
#mirror_dirs="\
#"

# another hardcoded internal list
mirror_files="\
ftp://ftp.linux.ncsu.edu/pub/fedora/linux/releases/13/Everything/i386/os/RPM-GPG-KEY-fedora-13-primary
ftp://ftp.linux.ncsu.edu/pub/fedora/linux/releases/13/Everything/source/SRPMS/python-kid-0.9.6-6.fc13.src.rpm
ftp://ftp.linux.ncsu.edu/pub/fedora/linux/releases/13/Everything/source/SRPMS/repoview-0.6.5-1.fc13.src.rpm
ftp://ftp.linux.ncsu.edu/pub/fedora/linux/releases/13/Everything/source/SRPMS/pungi-2.0.21-1.fc13.src.rpm
ftp://ftp.linux.ncsu.edu/pub/fedora/linux/updates/13/SRPMS/livecd-tools-033-3.fc13.src.rpm
ftp://ftp.linux.ncsu.edu/pub/fedora/linux/updates/13/SRPMS/zyx-liveinstaller-0.2.4-1.fc13.src.rpm
ftp://ftp.linux.ncsu.edu/pub/epel/RPM-GPG-KEY-EPEL-6
ftp://ftp.linux.ncsu.edu/pub/epel/6/SRPMS/pigz-2.1.6-1.el6.src.rpm
ftp://ftp.linux.ncsu.edu/pub/epel/6/SRPMS/mock-1.1.12-1.el6.src.rpm
"

# to enable debug messages
debug=1

# to suppress status messages
quiet=0


#############################################################################
#############################################################################
##
## functions
##
function usage {
    echo ""
    echo "usage:"
    echo ""
    echo "${progname} \\"
    echo "    [distroname=${distroname_def}] \\"
    echo "    [distrover=${distrover_def}] \\"
    echo "    [offline=${offline_def}] \\"
    echo "    [distrorelname=${distrorelname_def}] \\"
    echo "    [config_x64=${config_x64_def}] \\"
    echo "    [config_x32=${config_x32_def}] \\"
    echo "    [outputdir=${outputdir_def}] \\"
    echo "    [cachedir=${cachedir_def}] \\"
    echo "    [tmpdir=${tmpdir_def}] \\"
    echo "    [builtrepo=${builtrepo_def}]"
    echo ""
    echo "All arguments are optional, with default values shown as above."
    echo ""
    echo ""
    exit 1
}


#############################################################################
#
# usage: status <message...>
#
# wrapper for sending status messages to console and log
#
# globals used: quiet, progname, logfiles(not required)
#
function status {
    time="$( date +%Y-%m-%d.%H:%M:%S )"
    if ((! $quiet)); then
	echo "${progname}: ${time}: status: $@"
    fi
    for logfile in $logfiles; do
	echo "${progname}: ${time}: status: $@" >> $logfile
    done
}

#############################################################################
#
# usage: debug <message...>
#
# wrapper for sending debug messages to console and log
#
# globals used: debug, progname, logfiles(not required)
#
function debug {
    time="$( date +%Y-%m-%d.%H:%M:%S )"
    if ((! $debug)); then
	echo "${progname}: ${time}: debug: $@"
    fi
    for logfile in $logfiles; do
	echo "${progname}: ${time}: debug: $@" >> $logfile
    done
}


#############################################################################
#
# usage: die <message...>
#
# issue last words
#
function die {
    status "$@"
    exit 1
}


#############################################################################
#############################################################################
##
## main
##

status "initializing..."

#############################################################################
### calculate tree root and set up environment
elbuild_devroot=$( pushd "${progdir}/../.." > /dev/null 2>&1 ; \
    pwd ; popd > /dev/null 2>&1 )
debug "devroot is ${elbuild_devroot}"

# note: presumption is that el-build is run from within it's own
#       developtment tree, e.g. 
# $ ./relative/path/to/Ascendos/tools/el-build/el-build or $ ./el-build

#############################################################################
#
## set option value defaults
#
distroname="${distroname_def}"
distrover="${distrover_def}"
offline="${offline_def}"
distrorelname="${distrorelname_def}"
config_x64="${config_x64_def}"
config_x32="${config_x32_def}"
outputdir="${outputdir_def}"
homedotdir="${homedotdir_def}"
cachedir="${cachedir_def}"
tmpdir="${tmpdir_def}"
builtrepo="${builtrepo_def}"


#############################################################################
#
## process command line arguments / options
#
status "processing options..."
# this is a simple enough method for a first pass.  I'd have brought in
# viros's libvopt.sh if it wasn't so complex.
for option in "$@"; do
    if $( echo "${option}" | grep -q "=" ); then
	# simplest
#	eval "${option}"
	# a bit better, allows e.g. distroname="Two Words"
	# (though a two word distroname is as yet untested and may not work anyway)
	opt_name=$( echo "${option}" | sed -e 's/=.*//' )
	opt_val=$( echo "${option}" | sed -e 's/[^=]*=//' )
	eval "${opt_name}='${opt_val}'"
    else
	die "option '${option}' is invalid, options must be of the form 'option_name=option_value'"
    fi
    debug "opt is $option"
done


# todo: fill out list or get more abstract (ala viros' libvopt.sh)
#status "outputdir is ${outputdir}"
#status "distroname is ${distroname}"

if ( ! mkdir -p "${outputdir}" > /dev/null 2>&1 ); then
    die "output directory - ${outputdir} - could not be used/made"
fi

#############################################################################
#
## update mirrors / cache
#
status "updating cache / mirrors..."

# TODO: build.a.o needs to be mirrored, and thus de-referenced here
#       (due to bandwidth use, etc...)

# TODO: the bootstrapping OS needn't be full mirrored
#       (a script to mirror the needed parts of a repo from a .ks
#        would be very appreciated.  hint hint)

# use lftp for mirroring

# note: perhaps? pull instead from koji, or ascendos/everything 
#       (based on binary rpm name list generated from tuv srpm list)


if ( ! mkdir -p "${cachedir}" > /dev/null 2>&1 ); then
    die "cache directory (mirror root) - ${cachedir} - could not be used/made"
fi

cd "${cachedir}"

# TODO: support rsync as an option

if [ ${offline} == "yes" ]; then
    status "offline mode: not updating cache / mirrors..."
else
    for mirror_dir in ${mirror_dirs}; do
	status "updating mirror: ${mirror_dir}"

	mirror_hostpath=$( echo "${mirror_dir}" | sed -e 's/[^\/]*\/\///' )
	debug "mirror_hostpath is ${mirror_hostpath}"
	mirror_urltype=$( echo "${mirror_dir}" | sed -e 's/:\/\/.*//' )
	debug "mirror_urltype is ${mirror_urltype}"
	mirror_host=$( echo "${mirror_hostpath}" | sed -e 's/\/.*//' )
	debug "mirror_host is ${mirror_host}"
	mirror_path=$( echo "${mirror_hostpath}" | sed -e 's/[^\/]*\///' )
	debug "mirror_path is ${mirror_path}"
	mirror_path_parent=$( dirname "${mirror_path}" )
	debug "mirror_path_parent is ${mirror_path_parent}"
	mirror_path_child=$( basename "${mirror_path}" )
	debug "mirror_path_child is ${mirror_path_child}"
	mirror_path_xmog=$( echo "${mirror_path}" | sed -e 's/\//__/g' )
	mirror_dir_xmog="${mirror_host}___${mirror_path_xmog}"
	debug "mirror_dir_xmog is ${mirror_dir_xmog}"

	mirror_dest_path="${cachedir}/${mirror_dir_xmog}"
	if ( ! mkdir -p "${mirror_dest_path}" > /dev/null 2>&1 ); then
	    die "could not mkdir ${mirror_dest_path}"
	fi

	lftp -e "cd ${mirror_path_parent} ; mirror --ignore-time --continue --delete ${mirror_path_child} ${mirror_dest_path}; quit" "${mirror_urltype}://${mirror_host}"

    done

    mkdir -p "${cachedir}/one-off-files"
    for mirror_file in ${mirror_files}; do
	status "caching file: ${mirror_file}"

	mirror_hostpath=$( echo "${mirror_file}" | sed -e 's/[^\/]*\/\///' )
	debug "mirror_hostpath is ${mirror_hostpath}"
	mirror_urltype=$( echo "${mirror_file}" | sed -e 's/:\/\/.*//' )
	debug "mirror_urltype is ${mirror_urltype}"
	mirror_host=$( echo "${mirror_hostpath}" | sed -e 's/\/.*//' )
	debug "mirror_host is ${mirror_host}"
	mirror_path=$( echo "${mirror_hostpath}" | sed -e 's/[^\/]*\///' )
	debug "mirror_path is ${mirror_path}"
	mirror_path_parent=$( dirname "${mirror_path}" )
	debug "mirror_path_parent is ${mirror_path_parent}"
	mirror_path_child=$( basename "${mirror_path}" )
	debug "mirror_path_child is ${mirror_path_child}"
	mirror_path_xmog=$( echo "${mirror_path}" | sed -e 's/\//__/g' )
	mirror_file_xmog="${mirror_host}___${mirror_path_xmog}"
	debug "mirror_file_xmog is ${mirror_file_xmog}"

	# for now, just clobber
	# TODO: have finer grained actual caching behavior
	rm -f "${cachedir}/one-off-files/${mirror_path_child}"
	wget -q -O "${cachedir}/one-off-files/${mirror_path_child}" \
	    "${mirror_file}"

    done

fi

# trust our own copies of the keys, instead of theoretical mitm 
# during the download of the src.rpms from the same server
cp "${elbuild_devroot}/security/keys/RPM-GPG-KEY-"* \
    "${cachedir}/one-off-files/"

# note: ugly(?) temporary workaround that will be obsolete no later than the 
#       time when koji/makeworld show up in el-build
createrepo \
    "${cachedir}/build.ascendos.org___linux__ascendos__SRPMS"
createrepo \
    -g "${elbuild_devroot}/6/6.0/configs/comps-asc6-x86_64.xml" \
    "${cachedir}/build.ascendos.org___linux__ascendos__6.0/os/x86_64" 
createrepo \
    -g "${elbuild_devroot}/6/6.0/configs/comps-asc6-i386.xml" \
    "${cachedir}/build.ascendos.org___linux__ascendos__6.0/os/i386" 

# perhaps this never was needed if I had not been using offline=yes before recovering
# from a prior bug
#createrepo \
#    -g "${cachedir}/ftp.scientificlinux.org___linux__scientific__6.0__x86_64__os/repodata/comps-sl6-x86_64.xml" \
#    "${cachedir}/ftp.scientificlinux.org___linux__scientific__6.0__x86_64__os"
#createrepo \
#    -g "${cachedir}/ftp.scientificlinux.org___linux__scientific__6.0__x86_64__os/repodata/comps-sl6-i386.xml" \
#    "${cachedir}/ftp.scientificlinux.org___linux__scientific__6.0__i386__os"



#############################################################################
#
## launch user-httpd on port 8421
#

# TODO: use random port between some range instead of static port

# note: one could also tar up the docroot into a new qemu disk image, and
#       use that to expose the data to the VM (or probably several other
#       ways, including non-userstack networking that may be faster)

# create directory for config/logs, and one for docroot
mkdir -p "${homedotdir}/vm-httpd/${starttime}.${mypid}.etc"
mkdir -p "${homedotdir}/vm-httpd/${starttime}.${mypid}.docroot"

# expose the mirrors / cache inside the docroot
ln -s ../../cache \
    "${homedotdir}/vm-httpd/${starttime}.${mypid}.docroot/cache"

# this could no doubt be narrowed, lazy big hammer for the first pass
killall httpd > /dev/null 2>&1
sleep 2
killall -KILL httpd > /dev/null 2>&1
sleep 2
# launch the httpd daemon
"${elbuild_devroot}/tools/el-build/user-httpd" \
    8421 \
    "${homedotdir}/vm-httpd/${starttime}.${mypid}.docroot" \
    "${homedotdir}/vm-httpd/${starttime}.${mypid}.etc" \
    start


#############################################################################
#
## prepare network environment for the throwaway vm
#


## expose inner processing script (x-run/isobuild) in the docroot
cp "${elbuild_devroot}/tools/el-build/isobuild" \
    "${homedotdir}/vm-httpd/${starttime}.${mypid}.docroot/x-run" 

## expose pungi kickstarts in the docroot
cp "${elbuild_devroot}/6/6.0/configs/pungi-"*.ks \
    "${homedotdir}/vm-httpd/${starttime}.${mypid}.docroot/" 

## expose pungi i386 mock config in the docroot
cp "${elbuild_devroot}/6/6.0/configs/mock-"*.cfg \
    "${homedotdir}/vm-httpd/${starttime}.${mypid}.docroot/" 


### create throwaway vm's .ks from template, placed in docroot
cp "${elbuild_devroot}/tools/el-build/min-el60-x64.ks" \
    "${homedotdir}/vm-httpd/${starttime}.${mypid}.docroot/" 

#############################################################################
#
## processing container/vm kickstart additions (to a minimal kickstart)
#
cat <<EOF >> "${homedotdir}/vm-httpd/${starttime}.${mypid}.docroot/min-el60-x64.ks"
%packages --default
# for retrieving files from the host httpd server and/or the internet
wget
%end

%post --log=/root/min-ks.post.log.log
## services
/sbin/chkconfig --level=3 NetworkManager


#############################################################################
#
## rc.local appending: executed _AFTER_ install, on first boot
#
cat << FOO >> /etc/rc.d/rc.local

# let the user see terminal output if they happen to be watching a console
rhgb-client --quit

# tell x-run that it is OK to overwrite /dev/sdb with its output
touch /tmp/disk-sdb-is-going-to-get-overwritten

wget -O /tmp/x-run http://10.0.2.2:8421/x-run
chmod +x /tmp/x-run
# TODO: x-run uses the installed yum.repos.d, which do not yet utilize
#       available mirrors (cough, vmirmog, cough)
( /tmp/x-run 2>&1 | tee -a /root/x-run.log ) &

FOO
#
## end post-install rc.local appendage
#
#############################################################################

%end
EOF

#
## end processing container/vm kickstart additions
#
#############################################################################

#############################################################################
#
## processing target distro output kickstart (for pungi)
#

# nothing dynamic yet, put probably sooner or later
sed -i \
    -e 's/example/example/g' \
    "${homedotdir}/vm-httpd/${starttime}.${mypid}.docroot/${config_x64}" 
sed -i \
    -e 's/example/example/g' \
    "${homedotdir}/vm-httpd/${starttime}.${mypid}.docroot/${config_x32}" 

#
## end processing target distro output kickstart (for pungi)
#
#############################################################################

# TODO perhaps improve with definable/option for bootstrap_repotree
# TODO more general/flexible mirror support ala viros' vmirmog etc...  (too complex for now)
sed -i \
    -e 's|ftp://ftp.scientificlinux.org/linux/scientific/6.0/x86_64/os|http://10.0.2.2:8421/cache/ftp.scientificlinux.org___linux__scientific__6.0__x86_64__os|' \
    "${homedotdir}/vm-httpd/${starttime}.${mypid}.docroot/min-el60-x64.ks"


#############################################################################
#
## create throwaway vm disk image
#
mkdir -p "${tmpdir}/${starttime}.${mypid}.vm"
qemu-img create "${tmpdir}/${starttime}.${mypid}.vm/sysroot.img" 77G
qemu-img create "${tmpdir}/${starttime}.${mypid}.vm/output.img" 77G


#############################################################################
#
## run netinst(all) on/to throwaway vm disk image
#

# TODO: not actually cleaning anything up yet
#virsh destroy "${progname}-${starttime}-${mypid}"
#virsh undefine "${progname}-${starttime}-${mypid}"

# TODO: add standard qemu (not provided by tuv's repos) as fallback for
#       an x32 build option, or e.g. my amd-sempron3400+ no-amd-svm case

# TODO: is the root of security/pristineness here that the locally cached
#       copy of the pungi-bootstrap os was not corrupt?  I.e. perhaps add
#       some sort of check against our copy of hashes for the files used
#       for the netinst here (just boot.iso? or does virt-install pull the
#       kernel and initrd from PXE/pxeboot directories?)

virt-install \
    --name="${progname}-${starttime}-${mypid}" \
    --location="${cachedir}/ftp.scientificlinux.org___linux__scientific__6.0__x86_64__os" \
    --disk="${tmpdir}/${starttime}.${mypid}.vm/sysroot.img" \
    --disk="${tmpdir}/${starttime}.${mypid}.vm/output.img" \
    --ram=768 \
    --noreboot \
    -x "ks=http://10.0.2.2:8421/min-el60-x64.ks"

# note: this doesn't seem to work at all (due to virt-install signatures? 
#       qemu-img qcow2 requirements?
#mv \
#    "${tmpdir}/${starttime}.${mypid}.vm/sysroot.img" \
#    "${tmpdir}/${starttime}.${mypid}.vm/sysroot.freshinstall.img" 
#qemu-img create -f qcow2 \
#    -b "${tmpdir}/${starttime}.${mypid}.vm/sysroot.freshinstall.img" \
#    "${tmpdir}/${starttime}.${mypid}.vm/sysroot.img"
# TODO: above is indicating a desire/intent to be able to cache the
#       freshinstall img for use in subsequent run. 


#############################################################################
#
## run throwaway vm for main/inner processing/build phase
#
virsh start "${progname}-${starttime}-${mypid}"

# wait until processing is complete
xdone=0
while ((! $xdone)); do
    sleep 30
    if $( ! virsh list | grep "${progname}-${starttime}-${mypid}" | grep -q running ); then
	xdone=1
    fi
done

#############################################################################
#
## arrange output for user, clean up, and exit
#
pushd "${outputdir}" > /dev/null 2>&1
tar xvf "${tmpdir}/${starttime}.${mypid}.vm/output.img"
popd > /dev/null 2>&1

#############################################################################
## end script - only notes below
#############################################################################
#
#
#

