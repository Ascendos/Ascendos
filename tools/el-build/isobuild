#!/usr/bin/env bash
#
#############################################################################
#############################################################################
#
# isobuild: a complete and deterministic environment and wrapper for pungi
#
#############################################################################
#
# Copyright 2011 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
# This file is part of X.
#
#    X is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    X is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with X.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################
# note: if you'd like a different license, just let me know which and why
#############################################################################


#############################################################################
#############################################################################
##
## isobuild
##
##
## DESCRIPTION
##
## isobuild presumes it is run on standard pungi capable platform, e.g.
## SL60/F13/, and proceeds to generate pungi output in a thusly more easily
## reproducible fashion
##
##
## LONG TERM ROADMAP
##
## -
##
## NOTES
##
## - 
##
#############################################################################



#############################################################################
#############################################################################
##
## get runtime environment
##
starttime="$( date +%Y%m%d%H%M%S )"
progname="$( basename $0 )"
# less confusing output messages when run as embedded /tmp/x-run
progname="isobuild"
progdir=$( ( pushd $( dirname $( readlink -e $0 ) ) > /dev/null 2>&1 ; \
    pwd ; popd > /dev/null 2>&1 ) )
rundir="$( pwd )"
mypid=$$


#############################################################################
#############################################################################
##
## constant and option default definitions
##
fedora_mirror_root="ftp://ftp.linux.ncsu.edu/pub/fedora"
# 10.0.2.2 is the ip address the containing qemu-kvm uses to expose the
# host, which in this case is running apache on port 8421 as non-root
elbuild_docroot="http://10.0.2.2:8421/"
cache_root="${elbuild_docroot}/cache/"

x64outroot=/root/el-build-workarea/output
x32outroot=/var/lib/mock/mock-for-pungi-el6-i386/root/root/el-build-workarea/output
outroot=/root/output

#############################################################################
#############################################################################
##
## main
##

### presumption, this is run as root from /etc/rc.d/rc.local on a system that
### has just had a min-sl60 kickstart installation (basic 'minimal' sl60 install)

# gotta start somewhere
cd /root

# keep screen from blanking (perhaps this should be in el-build only)
setterm -blank 0

# pungi requires selinux not be enforcing
setenforce 0


mv /etc/yum.repos.d /etc/yum.repos.d.orig
mkdir /etc/yum.repos.d
cat <<EOF > /etc/yum.repos.d/sl.repo
[sl]
name=Scientific Linux \$releasever - \$basearch
# yumvars seem pretty stupid, needing to be full directory entries, i.e. this doesn't work,
# nor does \${releasever} work...
#baseurl=${cache_root}ftp.scientificlinux.org___linux__scientific__\$releasever__\$basearch__os/
baseurl=${cache_root}ftp.scientificlinux.org___linux__scientific__6.0__x86_64__os/
#mirrorlist=http://ftp.scientificlinux.org/linux/scientific/mirrorlist/sl-base-6.txt
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-sl file:///etc/pki/rpm-gpg/RPM-GPG-KEY-dawson
EOF

#cp /etc/yum.repos.d/sl.repo /etc/yum.repos.d/sl.repo.orig
# no need for updates (until an os bug requiring one hits us)
#mv /etc/yum.repos.d/sl-updates.repo /etc/yum.repos.d/sl-updates.repo.orig
#
#sed -i \
#    -e 's|http://ftp.scientificlinux.org|ftp://ftp.scientificlinux.org|g' \
#    /etc/yum.repos.d/sl.repo
#
#sed -i \
#    -e "s|ftp://ftp.scientificlinux.org/linux/scientific/\$releasever/\$basearch/os|${cache_root}ftp.scientificlinux.org___linux__scientific__\$releasever__\$basearch__os|g" \
#    /etc/yum.repos.d/sl.repo

# for rpmbuild(--rebuild)
yum -y install rpm-build

# for rebuilding pigz
yum -y install gcc
yum -y install zlib-devel

# for rpmdev-setuptree (not used) 
#yum -y install rpm-build

# for general utility (not used)
#yum -y install lftp

# for external data pulling (should already be installed
yum -y install wget

# for rebuilding python-kid
yum -y install python-docutils

# for mock
yum -y install python-decoratortools

# for rebuilding pungi
yum -y install python-devel

# for running pungi
yum -y install anaconda-runtime

# for running pungi to yield i386 media on x86_64 host
#yum -y install epel-release
#yum -y install mock
# or alternately without bringing 'all' of epel into things-

## install pubkeys for verifying .src.rpm signatures
#wget ${fedora_mirror_root}/linux/releases/13/Everything/i386/os/RPM-GPG-KEY-fedora-13-primary
wget "${cache_root}one-off-files/RPM-GPG-KEY-fedora-13-primary"
rpm --import RPM-GPG-KEY-fedora-13-primary
#wget wget ftp://ftp.linux.ncsu.edu/pub/epel/RPM-GPG-KEY-EPEL-6
wget "${cache_root}one-off-files/RPM-GPG-KEY-EPEL-6"
rpm --import RPM-GPG-KEY-EPEL-6

## TODO: make the following an loop over a list (necessarily ordered)

## get python-kid installed, needed by repoview
#wget "${fedora_mirror_root}/linux/releases/13/Everything/source/SRPMS/python-kid-0.9.6-6.fc13.src.rpm"
wget "${cache_root}one-off-files/python-kid-0.9.6-6.fc13.src.rpm"
if ( ! rpm --checksig python-kid-0.9.6-6.fc13.src.rpm ); then
    echo "${progname}: fatal error, python-kid signature could not be verified as correct"
    exit 1
fi
rpmbuild --rebuild python-kid-0.9.6-6.fc13.src.rpm
rpm -Uvh /rpmbuild/RPMS/noarch/python-kid-0.9.6-6.el6.noarch.rpm

## get repoview installed, needed by pungi
#wget ${fedora_mirror_root}/linux/releases/13/Everything/source/SRPMS/repoview-0.6.5-1.fc13.src.rpm
wget "${cache_root}one-off-files/repoview-0.6.5-1.fc13.src.rpm"
if ( ! rpm --checksig repoview-0.6.5-1.fc13.src.rpm ); then
    echo "${progname}: fatal error, repoview signature could not be verified as correct"
    exit 1
fi
rpmbuild --rebuild repoview-0.6.5-1.fc13.src.rpm 
rpm -Uvh /rpmbuild/RPMS/noarch/repoview-0.6.5-1.el6.noarch.rpm


## get pungi
#wget ${fedora_mirror_root}/linux/releases/13/Everything/source/SRPMS/pungi-2.0.21-1.fc13.src.rpm
# note: the f13-updates version of pungi seems to only include a single esoteric one line change
#       which seems needed if and only if some python update has also been applied (e.g. using
#       SL60__+updates__ for the bootstrap repo, which is not currently the default here)
# todo: check to see if f14/++ versions of pungi work without modification and/or have important
#       enhancements or bugfixes.  It's reasonable to start with f13 as that is likely what
#       tuv branched for its own builds (educated guess with no evidence yet to the contrary)
wget "${cache_root}one-off-files/pungi-2.0.21-1.fc13.src.rpm"
if ( ! rpm --checksig pungi-2.0.21-1.fc13.src.rpm ); then
    echo "${progname}: fatal error, pungi signature could not be verified as correct"
    exit 1
fi
rpmbuild --rebuild pungi-2.0.21-1.fc13.src.rpm
rpm -Uvh /rpmbuild/RPMS/noarch/pungi-2.0.21-1.el6.noarch.rpm

## get livecd-tools for generating installable live media (livecd/dvd/usb etc) images
#wget ftp://ftp.linux.ncsu.edu/pub/epel/6/SRPMS/livecd-tools-13.4-1.el6.src.rpm
wget "${cache_root}one-off-files/livecd-tools-13.4-1.el6.src.rpm"
if ( ! rpm --checksig livecd-tools-13.4-1.el6.src.rpm ); then
    echo "${progname}: fatal error, livecd-tools signature could not be verified as correct"
    exit 1
fi
rpmbuild --rebuild livecd-tools-13.4-1.el6.src.rpm
rpm -Uvh /rpmbuild/RPMS/x86_64/{livecd-tools,python-imgcreate}*.rpm

## get zyx-liveinstaller to support rebootless live media installation
#wget "${fedora_mirror_root}/linux/updates/13/SRPMS/zyx-liveinstaller-0.2.4-1.fc13.src.rpm"
wget "${cache_root}one-off-files/zyx-liveinstaller-0.2.4-1.fc13.src.rpm"
if ( ! rpm --checksig zyx-liveinstaller-0.2.4-1.fc13.src.rpm ); then
    echo "${progname}: fatal error, zyx-liveinstaller signature could not be verified as correct"
    exit 1
fi
rpmbuild --rebuild zyx-liveinstaller-0.2.4-1.fc13.src.rpm
# TODO: use result when invoking livecd-tools 
#       /rpmbuild/RPMS/noarch/zyx-liveinstaller-0.2.4-1.el6.noarch.rpm


## get pigz installed, needed by mock
#wget ftp://ftp.linux.ncsu.edu/pub/epel/6/SRPMS/pigz-2.1.6-1.el6.src.rpm
wget "${cache_root}one-off-files/pigz-2.1.6-1.el6.src.rpm"
if ( ! rpm --checksig pigz-2.1.6-1.el6.src.rpm ); then
    echo "${progname}: fatal error, pigz signature could not be verified as correct"
    exit 1
fi
rpmbuild --rebuild pigz-2.1.6-1.el6.src.rpm
rpm -Uvh /rpmbuild/RPMS/x86_64/pigz-2.1.6-1.el6.x86_64.rpm

## get mock installed, needed by pungi-x32(i386 output)
#wget ftp://ftp.linux.ncsu.edu/pub/epel/6/SRPMS/mock-1.1.12-1.el6.src.rpm
wget "${cache_root}one-off-files/mock-1.1.12-1.el6.src.rpm"
if ( ! rpm --checksig mock-1.1.12-1.el6.src.rpm ); then
    echo "${progname}: fatal error, mock signature could not be verified as correct"
    exit 1
fi
rpmbuild --rebuild mock-1.1.12-1.el6.src.rpm
rpm -Uvh /rpmbuild/RPMS/noarch/mock-1.1.12-1.el6.noarch.rpm


## run pungi non-mock for x86_64 (TODO: may as well run it under mock for consistency)
mkdir /root/el-build-workarea
mkdir /root/el-build-workarea/cache
mkdir /root/el-build-workarea/output

# TODO: see if there is a better pungi kickstart to start from in the spin-kickstarts
#       package, versus the one currently being based on from the pungi package itself.

# TODO: share pungi arch kickstarts with %include and ksflatten 

pungi \
    --cachedir=/root/el-build-workarea/cache \
    --destdir=/root/el-build-workarea/output \
    --name=Ascendos \
    --ver=6.0 \
    --bugurl=http://bugzilla.ascendos.org \
    --fulltree \
    --selfhosting \
    --nosplitmedia \
    --config="${elbuild_docroot}pungi-x86_64.ks"

# save space for now (same thing theoretically made later for i386 run)
rm -rvf /root/el-build-workarea/output/*/source/SRPMS \
    > /root/el-build-workarea/output/deleted.x86_64.SRPMS.txt

adduser xmock
usermod -a -G mock xmock
wget -O /etc/mock/mock-for-pungi-el6-i386.cfg \
    "${elbuild_docroot}mock-for-pungi-el6-i386.cfg"

su - xmock -c "mock -r mock-for-pungi-el6-i386 --init"
su - xmock \
    -c "mock -r mock-for-pungi-el6-i386 --no-clean --install wget"
su - xmock \
    -c "mock -r mock-for-pungi-el6-i386 --no-clean --install anaconda-runtime"
mkdir -p /var/lib/mock/mock-for-pungi-el6-i386/root/root
mkdir -p /var/lib/mock/mock-for-pungi-el6-i386/root/root/el-build-workarea
mkdir -p /var/lib/mock/mock-for-pungi-el6-i386/root/root/el-build-workarea/cache
# share the prior x86_64 cache with the i386 under mock run
#  - should save a few hours time.  Probably a few more can be
#    saved by using non-usermode qemu/kvm networking if available,
#    or alternately just transferring the cache once as a tar file 
#    image attached as disk.  And then also using any available free
#    lvm space for disks instead of qemu-img ones.  But like I said,
#    for 6x-alpha, not yet a high priority.
mount --bind \
    /root/el-build-workarea/cache \
    /var/lib/mock/mock-for-pungi-el6-i386/root/root/el-build-workarea/cache
mkdir -p /var/lib/mock/mock-for-pungi-el6-i386/root/root/el-build-workarea/output
cp -av /rpmbuild/RPMS/noarch/python-kid-0.9.6-6.el6.noarch.rpm \
    /var/lib/mock/mock-for-pungi-el6-i386/root/root/
su - xmock \
    -c "mock -r mock-for-pungi-el6-i386 --no-clean --shell '\
rpm -Uvh /root/python-kid-\*.rpm'"
cp -av /rpmbuild/RPMS/noarch/repoview-0.6.5-1.el6.noarch.rpm \
    /var/lib/mock/mock-for-pungi-el6-i386/root/root/
su - xmock \
    -c "mock -r mock-for-pungi-el6-i386 --no-clean --shell '\
rpm -Uvh /root/repoview-\*.rpm'"
cp -av /rpmbuild/RPMS/noarch/pungi-2.0.21-1.el6.noarch.rpm \
    /var/lib/mock/mock-for-pungi-el6-i386/root/root/
su - xmock \
    -c "mock -r mock-for-pungi-el6-i386 --no-clean --shell '\
rpm -Uvh /root/pungi-\*.rpm'"



# note sure about what works for multilinebreaking here, too tired to care
su - xmock \
    -c "mock -r mock-for-pungi-el6-i386 --verbose --no-clean --chroot '\
pungi \
  --cachedir=/root/el-build-workarea/cache \
  --destdir=/root/el-build-workarea/output \
  --name=Ascendos \
  --ver=6.0 \
  --bugurl=http://bugzilla.ascendos.org \
  --fulltree \
  --selfhosting \
  --nosplitmedia \
  --config=${elbuild_docroot}pungi-i386.ks'" 

# undo the bind mount
umount /var/lib/mock/mock-for-pungi-el6-i386/root/root/el-build-workarea/cache

mkdir /root/el-build-workarea
mkdir /root/el-build-workarea/cache
mkdir /root/el-build-workarea/tmp
## first livecd invocation, just minimal test for now
pushd /root/el-build-workarea
wget "${elbuild_docroot}livecd-desktop-i386.ks"
## install rebootless installation goodness
cat <<EOF >> "livecd-desktop-i386.ks"
%post --nochroot
rpm --root \$INSTALL_ROOT -Uvh /rpmbuild/RPMS/noarch/zyx-liveinstaller-0.2.4-1.el6.noarch.rpm
sed -i -e "s/fedora-release/ascendos-release/g" \$INSTALL_ROOT/usr/sbin/zyx-liveinstaller-cli
echo "Ascendos Alpha RuleZ" > \$INSTALL_ROOT/etc/zyx-liveinstaller.install.txt
# on 6.0-alpha zli seems very slow, no need to clutter apps menu with this very,
# alpha/experimental tool.  But still, nice to have as an option from the cli
rm -f \$INSTALL_ROOT/usr/share/applications/zyx-liveinstaller.desktop
EOF
livecd-creator \
    --verbose \
    --cache=/root/el-build-workarea/cache \
    --tmpdir=/root/el-build-workarea/tmp \
    --logfile=/root/el-build-workarea/livecd-desktop-x32.log \
    --fslabel="asc60_livecd_desktop_x32" \
    --config=livecd-desktop-i386.ks
mv asc60_livecd_desktop_x32.iso \
    "${x32outroot}/6.0/i386/iso/Ascendos-6.0-i386-LiveCD-Desktop.iso"
mv /root/el-build-workarea/livecd-desktop-x32.log \
    "${outroot}/logs/"
mv /root/el-build-workarea/livecd-desktop-i386.ks \
    "${outroot}/logs/"

wget "${elbuild_docroot}livecd-desktop-x86_64.ks"
## install rebootless installation goodness
cat <<EOF >> "livecd-desktop-x86_64.ks"
%post --nochroot
rpm --root \$INSTALL_ROOT -Uvh /rpmbuild/RPMS/noarch/zyx-liveinstaller-0.2.4-1.el6.noarch.rpm
sed -i -e "s/fedora-release/ascendos-release/g" \$INSTALL_ROOT/usr/sbin/zyx-liveinstaller-cli
echo "Ascendos Alpha RuleZ" > \$INSTALL_ROOT/etc/zyx-liveinstaller.install.txt
# on 6.0-alpha zli seems very slow, no need to clutter apps menu with this very,
# alpha/experimental tool.  But still, nice to have as an option from the cli
rm -f \$INSTALL_ROOT/usr/share/applications/zyx-liveinstaller.desktop
EOF
livecd-creator \
    --verbose \
    --cache=/root/el-build-workarea/cache \
    --tmpdir=/root/el-build-workarea/tmp \
    --logfile=/root/el-build-workarea/livecd-desktop-x64.log \
    --fslabel="asc60_livecd_desktop_x64" \
    --config=livecd-desktop-x86_64.ks
mv asc60_livecd_desktop_x64.iso \
    "${x64outroot}/6.0/x86_64/iso/Ascendos-6.0-x86_64-LiveCD-Desktop.iso"
mv /root/el-build-workarea/livecd-desktop-x64.log \
    "${outroot}/logs/"
mv /root/el-build-workarea/livecd-desktop-x86_64.ks \
    "${outroot}/logs/"
popd



mkdir -p "${outroot}"
mkdir "${outroot}/6.0"

# .composeinfo
mv "${x64outroot}/6.0/.composeinfo" \
    "${outroot}/6.0/.composeinfo.x86_64"
mv "${x32outroot}/6.0/.composeinfo" \
    "${outroot}/6.0/.composeinfo.i386"

# logs
mkdir "${outroot}/logs"
mv "${x64outroot}/logs/"* \
    "${outroot}/logs/"
mv "${x32outroot}/logs/"* \
    "${outroot}/logs/"
mv "${x64outroot}/deleted.x86_64.SRPMS.txt" \
    "${outroot}/logs/"
mv /root/anaconda-ks.cfg \
    "${outroot}/logs/build-host.anaconda-ks.cfg"
mv /root/install.log \
    "${outroot}/logs/build-host.install.log"
mv /root/install.log.syslog \
    "${outroot}/logs/build-host.install.log.syslog"
cp /root/x-run.log \
    "${outroot}/logs/x-run.partial.log"

# work
mkdir "${outroot}/work"
mv "${x64outroot}/work/"* \
    "${outroot}/work/"
mv "${x32outroot}/work/"* \
    "${outroot}/work/"

# main stuffs
mv "${x64outroot}/6.0/x86_64" \
    "${outroot}/6.0/"
mv "${x32outroot}/6.0/i386" \
    "${outroot}/6.0/"

# sources
mv "${x32outroot}/6.0/source" \
    "${outroot}/6.0/"


# prepare output for the external user
if [ -f /tmp/disk-sdb-is-going-to-get-overwritten ]; then
    cd "${outroot}"
    tar -cvf /dev/sdb . 
fi

# done

#############################################################################
## end script - only notes below
#############################################################################
#
#



